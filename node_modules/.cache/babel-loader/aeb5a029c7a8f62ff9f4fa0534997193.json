{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Updater = /*#__PURE__*/function () {\n  function Updater(container, particle) {\n    _classCallCheck(this, Updater);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Updater, [{\n    key: \"update\",\n    value: function update(delta) {\n      if (this.particle.destroyed) {\n        return;\n      }\n\n      this.updateOpacity(delta);\n      this.updateSize(delta);\n      this.updateAngle(delta);\n      this.updateColor(delta);\n      this.updateStrokeColor(delta);\n      this.updateOutMode(delta);\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(delta) {\n      var particle = this.particle;\n\n      if (particle.particlesOptions.opacity.animation.enable) {\n        switch (particle.opacity.status) {\n          case Enums_1.OpacityAnimationStatus.increasing:\n            if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n              particle.opacity.status = Enums_1.OpacityAnimationStatus.decreasing;\n            } else {\n              particle.opacity.value += (particle.opacity.velocity || 0) * delta.factor;\n            }\n\n            break;\n\n          case Enums_1.OpacityAnimationStatus.decreasing:\n            if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n              particle.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n            } else {\n              particle.opacity.value -= (particle.opacity.velocity || 0) * delta.factor;\n            }\n\n            break;\n        }\n\n        if (particle.opacity.value < 0) {\n          particle.opacity.value = 0;\n        }\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(delta) {\n      var _a;\n\n      var container = this.container;\n      var particle = this.particle;\n      var sizeOpt = particle.particlesOptions.size;\n      var sizeAnim = sizeOpt.animation;\n\n      if (sizeAnim.enable) {\n        switch (particle.size.status) {\n          case Enums_1.SizeAnimationStatus.increasing:\n            if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n              particle.size.status = Enums_1.SizeAnimationStatus.decreasing;\n            } else {\n              particle.size.value += (particle.size.velocity || 0) * delta.factor;\n            }\n\n            break;\n\n          case Enums_1.SizeAnimationStatus.decreasing:\n            if (particle.size.value <= sizeAnim.minimumValue) {\n              particle.size.status = Enums_1.SizeAnimationStatus.increasing;\n            } else {\n              particle.size.value -= (particle.size.velocity || 0) * delta.factor;\n            }\n\n        }\n\n        switch (sizeAnim.destroy) {\n          case Enums_1.DestroyType.max:\n            if (particle.size.value >= sizeOpt.value * container.retina.pixelRatio) {\n              particle.destroy();\n            }\n\n            break;\n\n          case Enums_1.DestroyType.min:\n            if (particle.size.value <= sizeAnim.minimumValue * container.retina.pixelRatio) {\n              particle.destroy();\n            }\n\n            break;\n        }\n\n        if (particle.size.value < 0 && !particle.destroyed) {\n          particle.size.value = 0;\n        }\n      }\n    }\n  }, {\n    key: \"updateAngle\",\n    value: function updateAngle(delta) {\n      var particle = this.particle;\n      var rotate = particle.particlesOptions.rotate;\n      var rotateAnimation = rotate.animation;\n      var speed = rotateAnimation.speed / 360 * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (rotate.path) {\n        particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n      } else {\n        if (rotateAnimation.enable) {\n          switch (particle.rotateDirection) {\n            case Enums_1.RotateDirection.clockwise:\n              particle.angle += speed;\n\n              if (particle.angle > max) {\n                particle.angle -= max;\n              }\n\n              break;\n\n            case Enums_1.RotateDirection.counterClockwise:\n            default:\n              particle.angle -= speed;\n\n              if (particle.angle < 0) {\n                particle.angle += max;\n              }\n\n              break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(delta) {\n      var particle = this.particle;\n\n      if (particle.color === undefined) {\n        return;\n      }\n\n      if (particle.particlesOptions.color.animation.enable) {\n        particle.color.h += (particle.colorVelocity || 0) * delta.factor;\n\n        if (particle.color.h > 360) {\n          particle.color.h -= 360;\n        }\n      }\n    }\n  }, {\n    key: \"updateStrokeColor\",\n    value: function updateStrokeColor(delta) {\n      var particle = this.particle;\n      var color = particle.stroke.color;\n\n      if (typeof color === \"string\" || color === undefined) {\n        return;\n      }\n\n      if (particle.strokeColor === undefined) {\n        return;\n      }\n\n      if (color.animation.enable) {\n        particle.strokeColor.h += (particle.colorVelocity || 0) * delta.factor;\n\n        if (particle.strokeColor.h > 360) {\n          particle.strokeColor.h -= 360;\n        }\n      }\n    }\n  }, {\n    key: \"fixOutOfCanvasPosition\",\n    value: function fixOutOfCanvasPosition() {\n      var container = this.container;\n      var particle = this.particle;\n      var wrap = particle.particlesOptions.move.warp;\n      var canvasSize = container.canvas.size;\n      var newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: -particle.size.value - particle.offset.y\n      };\n      var sizeValue = particle.size.value;\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(delta) {\n      var container = this.container;\n      var particle = this.particle;\n\n      switch (particle.particlesOptions.move.outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n          this.updateBounce(delta);\n          break;\n\n        case Enums_1.OutMode.destroy:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.size.value)) {\n            particle.destroy();\n            container.particles.remove(particle);\n            return;\n          }\n\n          break;\n\n        case Enums_1.OutMode.out:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.size.value)) {\n            this.fixOutOfCanvasPosition();\n          }\n\n      }\n    }\n  }, {\n    key: \"updateBounce\",\n    value: function updateBounce(delta) {\n      var container = this.container;\n      var particle = this.particle;\n      var handled = false;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = container.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var outMode = particle.particlesOptions.move.outMode,\n          pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.size.value,\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceHorizontal) {\n        var velocity = particle.velocity.horizontal;\n\n        if (bounds.right >= canvasSize.width && velocity > 0 || bounds.left <= 0 && velocity < 0) {\n          particle.velocity.horizontal *= -1;\n        }\n\n        var minPos = offset.x + size;\n\n        if (bounds.right >= canvasSize.width) {\n          particle.position.x = canvasSize.width - minPos;\n        } else if (bounds.left <= 0) {\n          particle.position.x = minPos;\n        }\n      }\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceVertical) {\n        var _velocity = particle.velocity.vertical;\n\n        if (bounds.bottom >= container.canvas.size.height && _velocity > 0 || bounds.top <= 0 && _velocity < 0) {\n          particle.velocity.vertical *= -1;\n        }\n\n        var _minPos = offset.y + size;\n\n        if (bounds.bottom >= canvasSize.height) {\n          particle.position.y = canvasSize.height - _minPos;\n        } else if (bounds.top <= 0) {\n          particle.position.y = _minPos;\n        }\n      }\n    }\n  }]);\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":null,"metadata":{},"sourceType":"script"}