{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connector = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Modes_1 = require(\"../../../../Enums/Modes\");\n\nvar Connector = /*#__PURE__*/function () {\n  function Connector(container) {\n    _classCallCheck(this, Connector);\n\n    this.container = container;\n  }\n\n  _createClass(Connector, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var container = this.container;\n      var options = container.options;\n\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        var distance = Math.abs(container.retina.connectModeRadius);\n        var query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n        var i = 0;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var p1 = _step.value;\n            var pos1 = p1.getPosition();\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = query.slice(i + 1)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var p2 = _step2.value;\n                var pos2 = p2.getPosition();\n                var distMax = Math.abs(container.retina.connectModeDistance);\n                var xDiff = Math.abs(pos1.x - pos2.x);\n                var yDiff = Math.abs(pos1.y - pos2.y);\n\n                if (xDiff < distMax && yDiff < distMax) {\n                  container.canvas.drawConnectLine(p1, p2);\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            ++i;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return Connector;\n}();\n\nexports.Connector = Connector;","map":null,"metadata":{},"sourceType":"script"}