{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorUtils = void 0;\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Constants_1 = require(\"./Constants\");\n\nvar ColorUtils =\n/*#__PURE__*/\nfunction () {\n  function ColorUtils() {\n    _classCallCheck(this, ColorUtils);\n  }\n\n  _createClass(ColorUtils, null, [{\n    key: \"colorToRgb\",\n    value: function colorToRgb(input) {\n      var _a, _b;\n\n      if (input === undefined) {\n        return;\n      }\n\n      var color = typeof input === \"string\" ? {\n        value: input\n      } : input;\n      var res;\n\n      if (typeof color.value === \"string\") {\n        if (color.value === Constants_1.Constants.randomColorValue) {\n          res = this.getRandomRgbColor();\n        } else {\n          res = ColorUtils.stringToRgb(color.value);\n        }\n      } else {\n        if (color.value instanceof Array) {\n          var colorSelected = Utils_1.Utils.itemFromArray(color.value);\n          res = ColorUtils.colorToRgb({\n            value: colorSelected\n          });\n        } else {\n          var colorValue = color.value;\n          var rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n\n          if (rgbColor.r !== undefined) {\n            res = rgbColor;\n          } else {\n            var hslColor = (_b = colorValue.hsl) !== null && _b !== void 0 ? _b : color.value;\n\n            if (hslColor.h !== undefined) {\n              res = ColorUtils.hslToRgb(hslColor);\n            }\n          }\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"colorToHsl\",\n    value: function colorToHsl(color) {\n      var rgb = this.colorToRgb(color);\n      return rgb !== undefined ? this.rgbToHsl(rgb) : rgb;\n    }\n  }, {\n    key: \"rgbToHsl\",\n    value: function rgbToHsl(color) {\n      var r1 = color.r / 255;\n      var g1 = color.g / 255;\n      var b1 = color.b / 255;\n      var max = Math.max(r1, g1, b1);\n      var min = Math.min(r1, g1, b1);\n      var res = {\n        h: 0,\n        l: (max + min) / 2,\n        s: 0\n      };\n\n      if (max != min) {\n        res.s = res.l < 0.5 ? (max - min) / (max + min) : (max - min) / (2.0 - max - min);\n        res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? 2.0 + (b1 - r1) / (max - min) : 4.0 + (r1 - g1) / (max - min);\n      }\n\n      res.l *= 100;\n      res.s *= 100;\n      res.h *= 60;\n\n      if (res.h < 0) {\n        res.h += 360;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"stringToAlpha\",\n    value: function stringToAlpha(input) {\n      var _a;\n\n      return (_a = ColorUtils.stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;\n    }\n  }, {\n    key: \"stringToRgb\",\n    value: function stringToRgb(input) {\n      return ColorUtils.stringToRgba(input);\n    }\n  }, {\n    key: \"hslToRgb\",\n    value: function hslToRgb(hsl) {\n      var result = {\n        b: 0,\n        g: 0,\n        r: 0\n      };\n      var hslPercent = {\n        h: hsl.h / 360,\n        l: hsl.l / 100,\n        s: hsl.s / 100\n      };\n\n      if (hslPercent.s === 0) {\n        result.b = hslPercent.l;\n        result.g = hslPercent.l;\n        result.r = hslPercent.l;\n      } else {\n        var q = hslPercent.l < 0.5 ? hslPercent.l * (1 + hslPercent.s) : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s;\n        var p = 2 * hslPercent.l - q;\n        result.r = ColorUtils.hue2rgb(p, q, hslPercent.h + 1 / 3);\n        result.g = ColorUtils.hue2rgb(p, q, hslPercent.h);\n        result.b = ColorUtils.hue2rgb(p, q, hslPercent.h - 1 / 3);\n      }\n\n      result.r = Math.floor(result.r * 255);\n      result.g = Math.floor(result.g * 255);\n      result.b = Math.floor(result.b * 255);\n      return result;\n    }\n  }, {\n    key: \"hslaToRgba\",\n    value: function hslaToRgba(hsla) {\n      var rgbResult = ColorUtils.hslToRgb(hsla);\n      return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r\n      };\n    }\n  }, {\n    key: \"getRandomRgbColor\",\n    value: function getRandomRgbColor(min) {\n      var fixedMin = min !== null && min !== void 0 ? min : 0;\n      return {\n        b: Math.floor(Utils_1.Utils.randomInRange(fixedMin, 256)),\n        g: Math.floor(Utils_1.Utils.randomInRange(fixedMin, 256)),\n        r: Math.floor(Utils_1.Utils.randomInRange(fixedMin, 256))\n      };\n    }\n  }, {\n    key: \"getStyleFromRgb\",\n    value: function getStyleFromRgb(color, opacity) {\n      return \"rgba(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \", \").concat(opacity !== null && opacity !== void 0 ? opacity : 1, \")\");\n    }\n  }, {\n    key: \"getStyleFromHsl\",\n    value: function getStyleFromHsl(color, opacity) {\n      return \"hsla(\".concat(color.h, \", \").concat(color.s, \"%, \").concat(color.l, \"%, \").concat(opacity !== null && opacity !== void 0 ? opacity : 1, \")\");\n    }\n  }, {\n    key: \"mix\",\n    value: function mix(color1, color2, size1, size2) {\n      var rgb1 = color1;\n      var rgb2 = color2;\n\n      if (rgb1.r === undefined) {\n        rgb1 = this.hslToRgb(color1);\n      }\n\n      if (rgb2.r === undefined) {\n        rgb2 = this.hslToRgb(color2);\n      }\n\n      return {\n        b: Utils_1.Utils.mix(rgb1.b, rgb2.b, size1, size2),\n        g: Utils_1.Utils.mix(rgb1.g, rgb2.g, size1, size2),\n        r: Utils_1.Utils.mix(rgb1.r, rgb2.r, size1, size2)\n      };\n    }\n  }, {\n    key: \"replaceColorSvg\",\n    value: function replaceColorSvg(image, color, opacity) {\n      if (!image.svgData) {\n        return \"\";\n      }\n\n      var svgXml = image.svgData;\n      var rgbHex = /#([0-9A-F]{3,6})/gi;\n      return svgXml.replace(rgbHex, function () {\n        return ColorUtils.getStyleFromHsl(color, opacity);\n      });\n    }\n  }, {\n    key: \"hue2rgb\",\n    value: function hue2rgb(p, q, t) {\n      var tCalc = t;\n\n      if (tCalc < 0) {\n        tCalc += 1;\n      }\n\n      if (tCalc > 1) {\n        tCalc -= 1;\n      }\n\n      if (tCalc < 1 / 6) {\n        return p + (q - p) * 6 * tCalc;\n      }\n\n      if (tCalc < 1 / 2) {\n        return q;\n      }\n\n      if (tCalc < 2 / 3) {\n        return p + (q - p) * (2 / 3 - tCalc) * 6;\n      }\n\n      return p;\n    }\n  }, {\n    key: \"stringToRgba\",\n    value: function stringToRgba(input) {\n      if (input.startsWith(\"rgb\")) {\n        var regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n        var result = regex.exec(input);\n        return result ? {\n          a: result.length > 4 ? parseFloat(result[5]) : 1,\n          b: parseInt(result[3], 10),\n          g: parseInt(result[2], 10),\n          r: parseInt(result[1], 10)\n        } : undefined;\n      } else if (input.startsWith(\"hsl\")) {\n        var _regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n\n        var _result = _regex.exec(input);\n\n        return _result ? ColorUtils.hslaToRgba({\n          a: _result.length > 4 ? parseFloat(_result[5]) : 1,\n          h: parseInt(_result[1], 10),\n          l: parseInt(_result[3], 10),\n          s: parseInt(_result[2], 10)\n        }) : undefined;\n      } else {\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\n        var hexFixed = input.replace(shorthandRegex, function (_m, r, g, b, a) {\n          return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n        });\n        var _regex2 = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\n\n        var _result2 = _regex2.exec(hexFixed);\n\n        return _result2 ? {\n          a: _result2[4] !== undefined ? parseInt(_result2[4], 16) / 0xff : 1,\n          b: parseInt(_result2[3], 16),\n          g: parseInt(_result2[2], 16),\n          r: parseInt(_result2[1], 16)\n        } : undefined;\n      }\n    }\n  }]);\n\n  return ColorUtils;\n}();\n\nexports.ColorUtils = ColorUtils;","map":null,"metadata":{},"sourceType":"script"}