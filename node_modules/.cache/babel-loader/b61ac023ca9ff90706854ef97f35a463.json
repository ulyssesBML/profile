{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Modes_1 = require(\"../../../../Enums/Modes\");\n\nvar Grabber =\n/*#__PURE__*/\nfunction () {\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    this.container = container;\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _a, _b;\n\n      var container = this.container;\n      var options = container.options;\n      var interactivity = options.interactivity;\n\n      if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (mousePos === undefined) {\n          return;\n        }\n\n        var distance = container.retina.grabModeDistance;\n        var query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var particle = _step.value;\n            var pos = particle.getPosition();\n\n            var _distance = Utils_1.Utils.getDistance(pos, mousePos);\n\n            if (_distance <= container.retina.grabModeDistance) {\n              var grabLineOptions = interactivity.modes.grab.links;\n              var lineOpacity = grabLineOptions.opacity;\n              var grabDistance = container.retina.grabModeDistance;\n              var opacityLine = lineOpacity - _distance * lineOpacity / grabDistance;\n\n              if (opacityLine > 0) {\n                var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n\n                if (!container.particles.grabLineColor) {\n                  var linksOptions = container.options.interactivity.modes.grab.links;\n                  var color = typeof optColor === \"string\" ? optColor : optColor.value;\n\n                  if (color === Utils_1.Constants.randomColorValue) {\n                    if (linksOptions.consent) {\n                      container.particles.grabLineColor = Utils_1.ColorUtils.colorToRgb({\n                        value: color\n                      });\n                    } else if (linksOptions.blink) {\n                      container.particles.grabLineColor = Utils_1.Constants.randomColorValue;\n                    } else {\n                      container.particles.grabLineColor = Utils_1.Constants.midColorValue;\n                    }\n                  } else if (color !== undefined) {\n                    container.particles.grabLineColor = Utils_1.ColorUtils.colorToRgb({\n                      value: color\n                    });\n                  }\n                }\n\n                var colorLine = void 0;\n\n                if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n                  colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n                } else if (container.particles.grabLineColor === \"mid\") {\n                  var sourceColor = (_b = particle.getFillColor()) !== null && _b !== void 0 ? _b : particle.getStrokeColor();\n                  colorLine = sourceColor ? Utils_1.ColorUtils.hslToRgb(sourceColor) : undefined;\n                } else {\n                  colorLine = container.particles.grabLineColor;\n                }\n\n                if (colorLine === undefined) {\n                  return;\n                }\n\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return Grabber;\n}();\n\nexports.Grabber = Grabber;","map":null,"metadata":{},"sourceType":"script"}