{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\n\nclass Plugins {\n  static getPlugin(plugin) {\n    return Plugins.plugins.filter(t => t.id === plugin)[0];\n  }\n\n  static addPlugin(plugin) {\n    if (!Plugins.getPlugin(plugin.id)) {\n      Plugins.plugins.push(plugin);\n    }\n  }\n\n  static getAvailablePlugins(container) {\n    const res = new Map();\n    const availablePlugins = Plugins.plugins.filter(t => t.needsPlugin(container.options));\n\n    for (const plugin of availablePlugins) {\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of Plugins.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  static getPreset(preset) {\n    return Plugins.presets.get(preset);\n  }\n\n  static addPreset(presetKey, options) {\n    if (!Plugins.getPreset(presetKey)) {\n      Plugins.presets.set(presetKey, options);\n    }\n  }\n\n  static addShapeDrawer(type, drawer) {\n    if (!Plugins.getShapeDrawer(type)) {\n      Plugins.drawers.set(type, drawer);\n    }\n  }\n\n  static getShapeDrawer(type) {\n    return Plugins.drawers.get(type);\n  }\n\n  static getSupportedShapes() {\n    return Plugins.drawers.keys();\n  }\n\n}\n\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();","map":null,"metadata":{},"sourceType":"script"}