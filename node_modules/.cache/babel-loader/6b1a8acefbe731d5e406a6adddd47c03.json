{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position;\n    this.options = options;\n    this.dragging = false;\n    let size = options.size.value * container.retina.pixelRatio;\n    const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n    const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n\n    if (random) {\n      size = Utils_1.Utils.randomInRange(minSize, size);\n    }\n\n    this.opacity = this.options.opacity;\n    this.size = size * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density;\n    const limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n  }\n\n  attract(particle) {\n    const options = this.options;\n\n    if (options.draggable) {\n      const mouse = this.container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = Utils_1.Utils.getDistance(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition();\n\n    const _Utils_1$Utils$getDis = Utils_1.Utils.getDistances(this.position, pos),\n          dx = _Utils_1$Utils$getDis.dx,\n          dy = _Utils_1$Utils$getDis.dy,\n          distance = _Utils_1$Utils$getDis.distance;\n\n    const angle = Math.atan2(dx, dy);\n    const acceleration = this.mass / Math.pow(distance, 2);\n\n    if (distance < this.size + particle.size.value) {\n      const sizeFactor = particle.size.value * 0.033 * this.container.retina.pixelRatio;\n\n      if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, angle, acceleration);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, angle, acceleration);\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density;\n    } else {\n      this.updateParticlePosition(particle, angle, acceleration);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a;\n\n    const container = this.container;\n    const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    };\n    return {\n      x: percentPosition.x / 100 * container.canvas.size.width,\n      y: percentPosition.y / 100 * container.canvas.size.height\n    };\n  }\n\n  updateParticlePosition(particle, angle, acceleration) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      const pSize = particle.size.value;\n      particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n      particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.orbitRadius === undefined) {\n        particle.orbitRadius = Utils_1.Utils.getDistance(particle.getPosition(), this.position);\n      }\n\n      if (particle.orbitRadius <= this.size && !this.options.destroy) {\n        particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n      }\n\n      if (particle.orbitAngle === undefined) {\n        particle.orbitAngle = Math.random() * Math.PI * 2;\n      }\n\n      const orbitRadius = particle.orbitRadius;\n      const orbitAngle = particle.orbitAngle;\n      particle.velocity.horizontal = 0;\n      particle.velocity.vertical = 0;\n      particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\n      particle.orbitRadius -= acceleration;\n      particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100;\n    } else {\n      particle.velocity.horizontal += Math.sin(angle) * acceleration;\n      particle.velocity.vertical += Math.cos(angle) * acceleration;\n    }\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":null,"metadata":{},"sourceType":"script"}