{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst Enums_1 = require(\"../Enums\");\n\nclass Utils {\n  static isSsr() {\n    return typeof window === \"undefined\" || !window;\n  }\n\n  static get animate() {\n    return this.isSsr() ? callback => setTimeout(callback) : callback => (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || window.setTimeout)(callback);\n  }\n\n  static get cancelAnimation() {\n    return this.isSsr() ? handle => clearTimeout(handle) : handle => (window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.clearTimeout)(handle);\n  }\n\n  static clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  static isInArray(value, array) {\n    return value === array || array instanceof Array && array.indexOf(value) > -1;\n  }\n\n  static mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n  }\n\n  static getParticleBaseVelocity(particle) {\n    let velocityBase;\n\n    switch (particle.direction) {\n      case Enums_1.MoveDirection.top:\n        velocityBase = {\n          x: 0,\n          y: -1\n        };\n        break;\n\n      case Enums_1.MoveDirection.topRight:\n        velocityBase = {\n          x: 0.5,\n          y: -0.5\n        };\n        break;\n\n      case Enums_1.MoveDirection.right:\n        velocityBase = {\n          x: 1,\n          y: -0\n        };\n        break;\n\n      case Enums_1.MoveDirection.bottomRight:\n        velocityBase = {\n          x: 0.5,\n          y: 0.5\n        };\n        break;\n\n      case Enums_1.MoveDirection.bottom:\n        velocityBase = {\n          x: 0,\n          y: 1\n        };\n        break;\n\n      case Enums_1.MoveDirection.bottomLeft:\n        velocityBase = {\n          x: -0.5,\n          y: 1\n        };\n        break;\n\n      case Enums_1.MoveDirection.left:\n        velocityBase = {\n          x: -1,\n          y: 0\n        };\n        break;\n\n      case Enums_1.MoveDirection.topLeft:\n        velocityBase = {\n          x: -0.5,\n          y: -0.5\n        };\n        break;\n\n      default:\n        velocityBase = {\n          x: 0,\n          y: 0\n        };\n        break;\n    }\n\n    return velocityBase;\n  }\n\n  static getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return {\n      dx: dx,\n      dy: dy,\n      distance: Math.sqrt(dx * dx + dy * dy)\n    };\n  }\n\n  static getDistance(pointA, pointB) {\n    return this.getDistances(pointA, pointB).distance;\n  }\n\n  static loadFont(character) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        yield document.fonts.load(\"\".concat(character.weight, \" 36px '\").concat(character.font, \"'\"));\n      } catch (_a) {}\n    });\n  }\n\n  static arrayRandomIndex(array) {\n    return Math.floor(Math.random() * array.length);\n  }\n\n  static itemFromArray(array, index) {\n    return array[index !== null && index !== void 0 ? index : this.arrayRandomIndex(array)];\n  }\n\n  static randomInRange(r1, r2) {\n    const max = Math.max(r1, r2),\n          min = Math.min(r1, r2);\n    return Math.random() * (max - min) + min;\n  }\n\n  static isPointInside(point, size, radius) {\n    return this.areBoundsInside(this.calculateBounds(point, radius !== null && radius !== void 0 ? radius : 0), size);\n  }\n\n  static areBoundsInside(bounds, size) {\n    return bounds.left < size.width && bounds.right > 0 && bounds.top < size.height && bounds.bottom > 0;\n  }\n\n  static calculateBounds(point, radius) {\n    return {\n      bottom: point.y + radius,\n      left: point.x - radius,\n      right: point.x + radius,\n      top: point.y - radius\n    };\n  }\n\n  static loadImage(source) {\n    return new Promise((resolve, reject) => {\n      if (!source) {\n        reject(\"Error tsParticles - No image.src\");\n        return;\n      }\n\n      const image = {\n        source: source,\n        type: source.substr(source.length - 3)\n      };\n      const img = new Image();\n      img.addEventListener(\"load\", () => {\n        image.element = img;\n        resolve(image);\n      });\n      img.addEventListener(\"error\", () => {\n        reject(\"Error tsParticles - loading image: \".concat(source));\n      });\n      img.src = source;\n    });\n  }\n\n  static downloadSvgImage(source) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!source) {\n        throw new Error(\"Error tsParticles - No image.src\");\n      }\n\n      const image = {\n        source: source,\n        type: source.substr(source.length - 3)\n      };\n\n      if (image.type !== \"svg\") {\n        return this.loadImage(source);\n      }\n\n      const response = yield fetch(image.source);\n\n      if (!response.ok) {\n        throw new Error(\"Error tsParticles - Image not found\");\n      }\n\n      image.svgData = yield response.text();\n      return image;\n    });\n  }\n\n  static deepExtend(destination, ...sources) {\n    for (const source of sources.filter(s => s !== undefined && s !== null)) {\n      if (typeof source !== \"object\") {\n        destination = source;\n        continue;\n      }\n\n      const sourceIsArray = Array.isArray(source);\n\n      if (sourceIsArray && (typeof destination !== \"object\" || !destination || !Array.isArray(destination))) {\n        destination = [];\n      } else if (!sourceIsArray && (typeof destination !== \"object\" || !destination || Array.isArray(destination))) {\n        destination = {};\n      }\n\n      for (const key in source) {\n        if (key === \"__proto__\") {\n          continue;\n        }\n\n        const value = source[key];\n        const isObject = typeof value === \"object\";\n        destination[key] = isObject && Array.isArray(value) ? value.map(v => this.deepExtend(destination[key], v)) : this.deepExtend(destination[key], value);\n      }\n    }\n\n    return destination;\n  }\n\n  static isDivModeEnabled(mode, divs) {\n    return divs instanceof Array ? !!divs.find(t => t.enable && Utils.isInArray(mode, t.mode)) : Utils.isInArray(mode, divs.mode);\n  }\n\n  static divModeExecute(mode, divs, callback) {\n    if (divs instanceof Array) {\n      for (const div of divs) {\n        const divMode = div.mode;\n        const divEnabled = div.enable;\n\n        if (divEnabled && Utils.isInArray(mode, divMode)) {\n          this.singleDivModeExecute(div, callback);\n        }\n      }\n    } else {\n      const divMode = divs.mode;\n      const divEnabled = divs.enable;\n\n      if (divEnabled && Utils.isInArray(mode, divMode)) {\n        this.singleDivModeExecute(divs, callback);\n      }\n    }\n  }\n\n  static singleDivModeExecute(div, callback) {\n    const ids = div.ids;\n\n    if (ids instanceof Array) {\n      for (const id of ids) {\n        callback(id, div);\n      }\n    } else {\n      callback(ids, div);\n    }\n  }\n\n  static divMode(divs, divId) {\n    if (!divId || !divs) {\n      return;\n    }\n\n    if (divs instanceof Array) {\n      return divs.find(d => Utils.isInArray(divId, d.ids));\n    } else if (Utils.isInArray(divId, divs.ids)) {\n      return divs;\n    }\n  }\n\n}\n\nexports.Utils = Utils;","map":null,"metadata":{},"sourceType":"script"}