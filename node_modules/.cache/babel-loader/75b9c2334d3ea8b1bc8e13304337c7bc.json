{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = void 0;\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nvar Utils_1 = require(\"./Utils\");\n\nvar CanvasUtils =\n/*#__PURE__*/\nfunction () {\n  function CanvasUtils() {\n    _classCallCheck(this, CanvasUtils);\n  }\n\n  _createClass(CanvasUtils, null, [{\n    key: \"paintBase\",\n    value: function paintBase(context, dimension, baseColor) {\n      context.save();\n      context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n      context.fillRect(0, 0, dimension.width, dimension.height);\n      context.restore();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(context, dimension) {\n      context.clearRect(0, 0, dimension.width, dimension.height);\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, colorLine, opacity, shadow) {\n      var drawn = false;\n\n      if (Utils_1.Utils.getDistance(begin, end) <= maxDistance) {\n        this.drawLine(context, begin, end);\n        drawn = true;\n      } else if (warp) {\n        var pi1;\n        var pi2;\n        var endNE = {\n          x: end.x - canvasSize.width,\n          y: end.y\n        };\n\n        var _Utils_1$Utils$getDis = Utils_1.Utils.getDistances(begin, endNE),\n            dx = _Utils_1$Utils$getDis.dx,\n            dy = _Utils_1$Utils$getDis.dy,\n            distance = _Utils_1$Utils$getDis.distance;\n\n        if (distance <= maxDistance) {\n          var yi = begin.y - dy / dx * begin.x;\n          pi1 = {\n            x: 0,\n            y: yi\n          };\n          pi2 = {\n            x: canvasSize.width,\n            y: yi\n          };\n        } else {\n          var endSW = {\n            x: end.x,\n            y: end.y - canvasSize.height\n          };\n\n          var _Utils_1$Utils$getDis2 = Utils_1.Utils.getDistances(begin, endSW),\n              _dx = _Utils_1$Utils$getDis2.dx,\n              _dy = _Utils_1$Utils$getDis2.dy,\n              _distance = _Utils_1$Utils$getDis2.distance;\n\n          if (_distance <= maxDistance) {\n            var _yi = begin.y - _dy / _dx * begin.x;\n\n            var xi = -_yi / (_dy / _dx);\n            pi1 = {\n              x: xi,\n              y: 0\n            };\n            pi2 = {\n              x: xi,\n              y: canvasSize.height\n            };\n          } else {\n            var endSE = {\n              x: end.x - canvasSize.width,\n              y: end.y - canvasSize.height\n            };\n\n            var _Utils_1$Utils$getDis3 = Utils_1.Utils.getDistances(begin, endSE),\n                _dx2 = _Utils_1$Utils$getDis3.dx,\n                _dy2 = _Utils_1$Utils$getDis3.dy,\n                _distance2 = _Utils_1$Utils$getDis3.distance;\n\n            if (_distance2 <= maxDistance) {\n              var _yi2 = begin.y - _dy2 / _dx2 * begin.x;\n\n              var _xi = -_yi2 / (_dy2 / _dx2);\n\n              pi1 = {\n                x: _xi,\n                y: _yi2\n              };\n              pi2 = {\n                x: pi1.x + canvasSize.width,\n                y: pi1.y + canvasSize.height\n              };\n            }\n          }\n        }\n\n        if (pi1 && pi2) {\n          this.drawLine(context, begin, pi1);\n          this.drawLine(context, end, pi2);\n          drawn = true;\n        }\n      }\n\n      if (!drawn) {\n        return;\n      }\n\n      context.lineWidth = width;\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = \"destination-out\";\n      }\n\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n\n      if (shadow.enable) {\n        var shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n        if (shadowColor) {\n          context.shadowBlur = shadow.blur;\n          context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n        }\n      }\n\n      context.stroke();\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(context, width, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle) {\n      this.drawTriangle(context, pos1, pos2, pos3);\n      context.lineWidth = width;\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = \"destination-out\";\n      }\n\n      context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n      context.fill();\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(context, width, lineStyle, begin, end) {\n      context.save();\n      this.drawLine(context, begin, end);\n      context.lineWidth = width;\n      context.strokeStyle = lineStyle;\n      context.stroke();\n      context.restore();\n    }\n  }, {\n    key: \"gradient\",\n    value: function gradient(context, p1, p2, opacity) {\n      var gradStop = Math.floor(p2.size.value / p1.size.value);\n      var color1 = p1.getFillColor();\n      var color2 = p2.getFillColor();\n\n      if (!color1 || !color2) {\n        return;\n      }\n\n      var sourcePos = p1.getPosition();\n      var destPos = p2.getPosition();\n      var midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.size.value, p2.size.value);\n      var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n      grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n      grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n      grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n      return grad;\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n      context.save();\n      this.drawLine(context, begin, end);\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n      context.lineWidth = width;\n      context.stroke();\n      context.restore();\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, radius, opacity, shadow) {\n      var pos = particle.getPosition();\n      context.save();\n      context.translate(pos.x, pos.y);\n      context.beginPath();\n\n      if (particle.angle !== 0) {\n        if (particle.particlesOptions.rotate.path) {\n          context.rotate(particle.angle + particle.pathAngle);\n        } else {\n          context.rotate(particle.angle);\n        }\n      }\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = \"destination-out\";\n      }\n\n      var shadowColor = particle.shadowColor;\n\n      if (shadow.enable && shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n        context.shadowOffsetX = shadow.offset.x;\n        context.shadowOffsetY = shadow.offset.y;\n      }\n\n      context.fillStyle = fillColorValue;\n      var stroke = particle.stroke;\n      context.lineWidth = particle.strokeWidth;\n      context.strokeStyle = strokeColorValue;\n\n      if (particle.close) {\n        context.closePath();\n      }\n\n      this.drawShape(container, context, particle, radius, opacity, delta);\n\n      if (stroke.width > 0) {\n        context.stroke();\n      }\n\n      if (particle.fill) {\n        context.fill();\n      }\n\n      context.restore();\n      context.save();\n      context.translate(pos.x, pos.y);\n\n      if (particle.angle !== 0) {\n        context.rotate(particle.angle);\n      }\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = \"destination-out\";\n      }\n\n      this.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n      context.restore();\n    }\n  }, {\n    key: \"drawShape\",\n    value: function drawShape(container, context, particle, radius, opacity, delta) {\n      if (!particle.shape) {\n        return;\n      }\n\n      var drawer = container.drawers.get(particle.shape);\n\n      if (!drawer) {\n        return;\n      }\n\n      drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n  }, {\n    key: \"drawShapeAfterEffect\",\n    value: function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n      if (!particle.shape) {\n        return;\n      }\n\n      var drawer = container.drawers.get(particle.shape);\n\n      if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n        return;\n      }\n\n      drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(context, plugin, delta) {\n      if (plugin.draw !== undefined) {\n        context.save();\n        plugin.draw(context, delta);\n        context.restore();\n      }\n    }\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(context, begin, end) {\n      context.beginPath();\n      context.moveTo(begin.x, begin.y);\n      context.lineTo(end.x, end.y);\n      context.closePath();\n    }\n  }, {\n    key: \"drawTriangle\",\n    value: function drawTriangle(context, p1, p2, p3) {\n      context.beginPath();\n      context.moveTo(p1.x, p1.y);\n      context.lineTo(p2.x, p2.y);\n      context.lineTo(p3.x, p3.y);\n      context.closePath();\n    }\n  }]);\n\n  return CanvasUtils;\n}();\n\nexports.CanvasUtils = CanvasUtils;","map":null,"metadata":{},"sourceType":"script"}