{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Repulser = void 0;\n\nconst Enums_1 = require(\"../../../../Enums\");\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nclass Repulser {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const options = container.options;\n    const mouse = container.interactivity.mouse;\n    const events = options.interactivity.events;\n    const divs = events.onDiv;\n    const divRepulse = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.repulse, divs);\n\n    if (!(divRepulse || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode) || divRepulse;\n  }\n\n  reset() {}\n\n  interact() {\n    const container = this.container;\n    const options = container.options;\n    const mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;\n    const events = options.interactivity.events;\n    const hoverEnabled = events.onHover.enable;\n    const hoverMode = events.onHover.mode;\n    const clickEnabled = events.onClick.enable;\n    const clickMode = events.onClick.mode;\n    const divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode)) {\n      this.hoverRepulse();\n    } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode)) {\n      this.clickRepulse();\n    } else {\n      Utils_1.Utils.divModeExecute(Enums_1.DivMode.repulse, divs, (id, div) => this.singleDivRepulse(id, div));\n    }\n  }\n\n  singleDivRepulse(id, div) {\n    const container = this.container;\n    const elem = document.getElementById(id);\n\n    if (!elem) {\n      return;\n    }\n\n    const pxRatio = container.retina.pixelRatio;\n    const pos = {\n      x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n      y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n    };\n    const repulseRadius = elem.offsetWidth / 2 * pxRatio;\n    const area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n    const divs = container.options.interactivity.modes.repulse.divs;\n    const divRepulse = Utils_1.Utils.divMode(divs, id);\n    this.processRepulse(pos, repulseRadius, area, divRepulse);\n  }\n\n  hoverRepulse() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const repulseRadius = container.retina.repulseModeDistance;\n    this.processRepulse(mousePos, repulseRadius, new Utils_1.Circle(mousePos.x, mousePos.y, repulseRadius));\n  }\n\n  processRepulse(position, repulseRadius, area, divRepulse) {\n    var _a;\n\n    const container = this.container;\n    const query = container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = Utils_1.Utils.getDistances(particle.position, position);\n      const normVec = {\n        x: dx / distance,\n        y: dy / distance\n      };\n      const velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : container.options.interactivity.modes.repulse.speed) * 100;\n      const repulseFactor = Utils_1.Utils.clamp((1 - Math.pow(distance / repulseRadius, 2)) * velocity, 0, 50);\n      particle.position.x = particle.position.x + normVec.x * repulseFactor;\n      particle.position.y = particle.position.y + normVec.y * repulseFactor;\n    }\n  }\n\n  clickRepulse() {\n    const container = this.container;\n\n    if (!container.repulse.finish) {\n      if (!container.repulse.count) {\n        container.repulse.count = 0;\n      }\n\n      container.repulse.count++;\n\n      if (container.repulse.count === container.particles.count) {\n        container.repulse.finish = true;\n      }\n    }\n\n    if (container.repulse.clicking) {\n      const repulseDistance = container.retina.repulseModeDistance;\n      const repulseRadius = Math.pow(repulseDistance / 6, 3);\n      const mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (mouseClickPos === undefined) {\n        return;\n      }\n\n      const range = new Utils_1.Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius);\n      const query = container.particles.quadTree.query(range);\n\n      for (const particle of query) {\n        const {\n          dx,\n          dy,\n          distance\n        } = Utils_1.Utils.getDistances(mouseClickPos, particle.position);\n        const d = distance * distance;\n        const velocity = container.options.interactivity.modes.repulse.speed;\n        const force = -repulseRadius * velocity / d;\n\n        if (d <= repulseRadius) {\n          container.repulse.particles.push(particle);\n          const angle = Math.atan2(dy, dx);\n          particle.velocity.horizontal = force * Math.cos(angle);\n          particle.velocity.vertical = force * Math.sin(angle);\n        }\n      }\n    } else if (container.repulse.clicking === false) {\n      for (const particle of container.repulse.particles) {\n        particle.velocity.horizontal = particle.initialVelocity.horizontal;\n        particle.velocity.vertical = particle.initialVelocity.vertical;\n      }\n\n      container.repulse.particles = [];\n    }\n  }\n\n}\n\nexports.Repulser = Repulser;","map":null,"metadata":{},"sourceType":"script"}