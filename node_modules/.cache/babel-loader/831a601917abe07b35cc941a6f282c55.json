{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar Collider = /*#__PURE__*/function () {\n  function Collider(container) {\n    _classCallCheck(this, Collider);\n\n    this.container = container;\n  }\n\n  _createClass(Collider, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return particle.particlesOptions.collisions.enable;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact(p1) {\n      var container = this.container;\n      var pos1 = p1.getPosition();\n      var query = container.particles.quadTree.query(new Utils_1.Circle(pos1.x, pos1.y, p1.size.value * 2));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var p2 = _step.value;\n\n          if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n            continue;\n          }\n\n          var pos2 = p2.getPosition();\n          var dist = Utils_1.Utils.getDistance(pos1, pos2);\n          var defaultSize = container.retina.sizeValue;\n          var radius1 = Collider.getRadius(p1, defaultSize);\n          var radius2 = Collider.getRadius(p2, defaultSize);\n          var distP = radius1 + radius2;\n\n          if (dist <= distP) {\n            this.resolveCollision(p1, p2);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"resolveCollision\",\n    value: function resolveCollision(p1, p2) {\n      switch (p1.particlesOptions.collisions.mode) {\n        case Enums_1.CollisionMode.absorb:\n          {\n            this.absorb(p1, p2);\n            break;\n          }\n\n        case Enums_1.CollisionMode.bounce:\n          {\n            Collider.bounce(p1, p2);\n            break;\n          }\n\n        case Enums_1.CollisionMode.destroy:\n          {\n            Collider.destroy(p1, p2);\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"absorb\",\n    value: function absorb(p1, p2) {\n      var container = this.container;\n      var fps = container.options.fpsLimit / 1000;\n\n      if (p1.size.value === undefined && p2.size.value !== undefined) {\n        p1.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value === undefined) {\n        p2.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n        if (p1.size.value >= p2.size.value) {\n          var factor = Utils_1.Utils.clamp(p1.size.value / p2.size.value, 0, p2.size.value) * fps;\n          p1.size.value += factor;\n          p2.size.value -= factor;\n\n          if (p2.size.value <= container.retina.pixelRatio) {\n            p2.size.value = 0;\n            p2.destroy();\n          }\n        } else {\n          var _factor = Utils_1.Utils.clamp(p2.size.value / p1.size.value, 0, p1.size.value) * fps;\n\n          p1.size.value -= _factor;\n          p2.size.value += _factor;\n\n          if (p1.size.value <= container.retina.pixelRatio) {\n            p1.size.value = 0;\n            p1.destroy();\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"rotate\",\n    value: function rotate(velocity, angle) {\n      return {\n        horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n        vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n      };\n    }\n  }, {\n    key: \"collisionVelocity\",\n    value: function collisionVelocity(v1, v2, m1, m2) {\n      return {\n        horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n        vertical: v1.vertical\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(p1, p2) {\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n      var yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n      var xDist = pos2.x - pos1.x;\n      var yDist = pos2.y - pos1.y;\n\n      if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n        var angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n        var m1 = p1.size.value;\n        var m2 = p2.size.value;\n        var u1 = Collider.rotate(p1.velocity, angle);\n        var u2 = Collider.rotate(p2.velocity, angle);\n        var v1 = Collider.collisionVelocity(u1, u2, m1, m2);\n        var v2 = Collider.collisionVelocity(u2, u1, m1, m2);\n        var vFinal1 = Collider.rotate(v1, -angle);\n        var vFinal2 = Collider.rotate(v2, -angle);\n        p1.velocity.horizontal = vFinal1.horizontal;\n        p1.velocity.vertical = vFinal1.vertical;\n        p2.velocity.horizontal = vFinal2.horizontal;\n        p2.velocity.vertical = vFinal2.vertical;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(p1, p2) {\n      if (p1.size.value === undefined && p2.size.value !== undefined) {\n        p1.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value === undefined) {\n        p2.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n        if (p1.size.value >= p2.size.value) {\n          p2.destroy();\n        } else {\n          p1.destroy();\n        }\n      }\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius(particle, fallback) {\n      return particle.bubble.radius || particle.size.value || fallback;\n    }\n  }]);\n\n  return Collider;\n}();\n\nexports.Collider = Collider;","map":null,"metadata":{},"sourceType":"script"}