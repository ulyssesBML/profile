{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = void 0;\n\nconst ColorUtils_1 = require(\"./ColorUtils\");\n\nconst Utils_1 = require(\"./Utils\");\n\nclass CanvasUtils {\n  static paintBase(context, dimension, baseColor) {\n    context.save();\n    context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n    context.restore();\n  }\n\n  static clear(context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n  }\n\n  static drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, colorLine, opacity, shadow) {\n    let drawn = false;\n\n    if (Utils_1.Utils.getDistance(begin, end) <= maxDistance) {\n      this.drawLine(context, begin, end);\n      drawn = true;\n    } else if (warp) {\n      let pi1;\n      let pi2;\n      const endNE = {\n        x: end.x - canvasSize.width,\n        y: end.y\n      };\n\n      const _Utils_1$Utils$getDis = Utils_1.Utils.getDistances(begin, endNE),\n            dx = _Utils_1$Utils$getDis.dx,\n            dy = _Utils_1$Utils$getDis.dy,\n            distance = _Utils_1$Utils$getDis.distance;\n\n      if (distance <= maxDistance) {\n        const yi = begin.y - dy / dx * begin.x;\n        pi1 = {\n          x: 0,\n          y: yi\n        };\n        pi2 = {\n          x: canvasSize.width,\n          y: yi\n        };\n      } else {\n        const endSW = {\n          x: end.x,\n          y: end.y - canvasSize.height\n        };\n\n        const _Utils_1$Utils$getDis2 = Utils_1.Utils.getDistances(begin, endSW),\n              dx = _Utils_1$Utils$getDis2.dx,\n              dy = _Utils_1$Utils$getDis2.dy,\n              distance = _Utils_1$Utils$getDis2.distance;\n\n        if (distance <= maxDistance) {\n          const yi = begin.y - dy / dx * begin.x;\n          const xi = -yi / (dy / dx);\n          pi1 = {\n            x: xi,\n            y: 0\n          };\n          pi2 = {\n            x: xi,\n            y: canvasSize.height\n          };\n        } else {\n          const endSE = {\n            x: end.x - canvasSize.width,\n            y: end.y - canvasSize.height\n          };\n\n          const _Utils_1$Utils$getDis3 = Utils_1.Utils.getDistances(begin, endSE),\n                dx = _Utils_1$Utils$getDis3.dx,\n                dy = _Utils_1$Utils$getDis3.dy,\n                distance = _Utils_1$Utils$getDis3.distance;\n\n          if (distance <= maxDistance) {\n            const yi = begin.y - dy / dx * begin.x;\n            const xi = -yi / (dy / dx);\n            pi1 = {\n              x: xi,\n              y: yi\n            };\n            pi2 = {\n              x: pi1.x + canvasSize.width,\n              y: pi1.y + canvasSize.height\n            };\n          }\n        }\n      }\n\n      if (pi1 && pi2) {\n        this.drawLine(context, begin, pi1);\n        this.drawLine(context, end, pi2);\n        drawn = true;\n      }\n    }\n\n    if (!drawn) {\n      return;\n    }\n\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n\n    if (shadow.enable) {\n      const shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n      if (shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      }\n    }\n\n    context.stroke();\n  }\n\n  static drawLinkTriangle(context, width, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle) {\n    this.drawTriangle(context, pos1, pos2, pos3);\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n  }\n\n  static drawConnectLine(context, width, lineStyle, begin, end) {\n    context.save();\n    this.drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n    context.restore();\n  }\n\n  static gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.size.value / p1.size.value);\n    const color1 = p1.getFillColor();\n    const color2 = p2.getFillColor();\n\n    if (!color1 || !color2) {\n      return;\n    }\n\n    const sourcePos = p1.getPosition();\n    const destPos = p2.getPosition();\n    const midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.size.value, p2.size.value);\n    const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n    return grad;\n  }\n\n  static drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    context.save();\n    this.drawLine(context, begin, end);\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n    context.restore();\n  }\n\n  static drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, radius, opacity, shadow) {\n    const pos = particle.getPosition();\n    context.save();\n    context.translate(pos.x, pos.y);\n    context.beginPath();\n\n    if (particle.angle !== 0) {\n      if (particle.particlesOptions.rotate.path) {\n        context.rotate(particle.angle + particle.pathAngle);\n      } else {\n        context.rotate(particle.angle);\n      }\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    const shadowColor = particle.shadowColor;\n\n    if (shadow.enable && shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      context.shadowOffsetX = shadow.offset.x;\n      context.shadowOffsetY = shadow.offset.y;\n    }\n\n    context.fillStyle = fillColorValue;\n    const stroke = particle.stroke;\n    context.lineWidth = particle.strokeWidth;\n    context.strokeStyle = strokeColorValue;\n\n    if (particle.close) {\n      context.closePath();\n    }\n\n    this.drawShape(container, context, particle, radius, opacity, delta);\n\n    if (stroke.width > 0) {\n      context.stroke();\n    }\n\n    if (particle.fill) {\n      context.fill();\n    }\n\n    context.restore();\n    context.save();\n    context.translate(pos.x, pos.y);\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    this.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.restore();\n  }\n\n  static drawShape(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    const drawer = container.drawers.get(particle.shape);\n\n    if (!drawer) {\n      return;\n    }\n\n    drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n  }\n\n  static drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    const drawer = container.drawers.get(particle.shape);\n\n    if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n      return;\n    }\n\n    drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n  }\n\n  static drawPlugin(context, plugin, delta) {\n    if (plugin.draw !== undefined) {\n      context.save();\n      plugin.draw(context, delta);\n      context.restore();\n    }\n  }\n\n  static drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n  }\n\n  static drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n  }\n\n}\n\nexports.CanvasUtils = CanvasUtils;","map":null,"metadata":{},"sourceType":"script"}