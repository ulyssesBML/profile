{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Infecter =\n/*#__PURE__*/\nfunction () {\n  function Infecter(container) {\n    _classCallCheck(this, Infecter);\n\n    this.container = container;\n  }\n\n  _createClass(Infecter, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.container.options.infection.enable;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact(p1, delta) {\n      var _a, _b;\n\n      var infecter1 = p1.infecter;\n      infecter1.updateInfection(delta.value);\n\n      if (infecter1.infectionStage === undefined) {\n        return;\n      }\n\n      var container = this.container;\n      var options = container.options;\n      var infectionOptions = options.infection;\n\n      if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n        return;\n      }\n\n      var infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n      var pxRatio = container.retina.pixelRatio;\n      var radius = p1.size.value * 2 + infectionStage1.radius * pxRatio;\n      var pos = p1.getPosition();\n      var infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n      var query = container.particles.quadTree.query(new Utils_1.Circle(pos.x, pos.y, radius)).filter(function (p) {\n        return p.infecter.infectionStage === undefined || p.infecter.infectionStage !== infecter1.infectionStage;\n      });\n      var infections = infectionStage1.rate;\n      var neighbors = query.length;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var p2 = _step.value;\n          var infecter2 = p2.infecter;\n\n          if (Math.random() < infections / neighbors) {\n            if (infecter2.infectionStage === undefined) {\n              infecter2.startInfection(infectedStage1);\n            } else if (infecter2.infectionStage < infecter1.infectionStage) {\n              infecter2.updateInfectionStage(infectedStage1);\n            } else if (infecter2.infectionStage > infecter1.infectionStage) {\n              var infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n              var infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n              infecter1.updateInfectionStage(infectedStage2);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Infecter;\n}();\n\nexports.Infecter = Infecter;","map":null,"metadata":{},"sourceType":"script"}