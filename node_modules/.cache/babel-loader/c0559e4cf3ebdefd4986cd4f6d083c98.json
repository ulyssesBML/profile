{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nconst Modes_1 = require(\"../../../../Enums/Modes\");\n\nclass Grabber {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const mouse = container.interactivity.mouse;\n    const events = container.options.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n  }\n\n  reset() {}\n\n  interact() {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      const distance = container.retina.grabModeDistance;\n      const query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n\n      for (const particle of query) {\n        const pos = particle.getPosition();\n        const distance = Utils_1.Utils.getDistance(pos, mousePos);\n\n        if (distance <= container.retina.grabModeDistance) {\n          const grabLineOptions = interactivity.modes.grab.links;\n          const lineOpacity = grabLineOptions.opacity;\n          const grabDistance = container.retina.grabModeDistance;\n          const opacityLine = lineOpacity - distance * lineOpacity / grabDistance;\n\n          if (opacityLine > 0) {\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n\n            if (!container.particles.grabLineColor) {\n              const linksOptions = container.options.interactivity.modes.grab.links;\n              const color = typeof optColor === \"string\" ? optColor : optColor.value;\n\n              if (color === Utils_1.Constants.randomColorValue) {\n                if (linksOptions.consent) {\n                  container.particles.grabLineColor = Utils_1.ColorUtils.colorToRgb({\n                    value: color\n                  });\n                } else if (linksOptions.blink) {\n                  container.particles.grabLineColor = Utils_1.Constants.randomColorValue;\n                } else {\n                  container.particles.grabLineColor = Utils_1.Constants.midColorValue;\n                }\n              } else if (color !== undefined) {\n                container.particles.grabLineColor = Utils_1.ColorUtils.colorToRgb({\n                  value: color\n                });\n              }\n            }\n\n            let colorLine;\n\n            if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n              colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            } else if (container.particles.grabLineColor === \"mid\") {\n              const sourceColor = (_b = particle.getFillColor()) !== null && _b !== void 0 ? _b : particle.getStrokeColor();\n              colorLine = sourceColor ? Utils_1.ColorUtils.hslToRgb(sourceColor) : undefined;\n            } else {\n              colorLine = container.particles.grabLineColor;\n            }\n\n            if (colorLine === undefined) {\n              return;\n            }\n\n            container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexports.Grabber = Grabber;","map":null,"metadata":{},"sourceType":"script"}