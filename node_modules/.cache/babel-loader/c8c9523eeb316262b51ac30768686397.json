{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nconst Enums_1 = require(\"../../../../Enums\");\n\nclass Bubbler {\n  constructor(container) {\n    this.container = container;\n  }\n\n  static calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue > optionsValue) {\n      const size = particleValue + (modeValue - optionsValue) * ratio;\n      return Utils_1.Utils.clamp(size, particleValue, modeValue);\n    } else if (modeValue < optionsValue) {\n      const size = particleValue - (optionsValue - modeValue) * ratio;\n      return Utils_1.Utils.clamp(size, modeValue, particleValue);\n    }\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const options = container.options;\n    const mouse = container.interactivity.mouse;\n    const events = options.interactivity.events;\n    const divs = events.onDiv;\n    const divBubble = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!particle.bubble.inRange || force) {\n      delete particle.bubble.divId;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }\n\n  interact() {\n    const options = this.container.options;\n    const events = options.interactivity.events;\n    const onHover = events.onHover;\n    const onClick = events.onClick;\n    const hoverEnabled = onHover.enable;\n    const hoverMode = onHover.mode;\n    const clickEnabled = onClick.enable;\n    const clickMode = onClick.mode;\n    const divs = events.onDiv;\n\n    if (hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble();\n    } else {\n      Utils_1.Utils.divModeExecute(Enums_1.DivMode.bubble, divs, (id, div) => this.singleDivHover(id, div));\n    }\n  }\n\n  singleDivHover(id, div) {\n    const container = this.container;\n    const elem = document.getElementById(id);\n\n    if (!elem) {\n      return;\n    }\n\n    const pxRatio = container.retina.pixelRatio;\n    const pos = {\n      x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n      y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n    };\n    const repulseRadius = elem.offsetWidth / 2 * pxRatio;\n    const area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n    const query = container.particles.quadTree.query(area);\n\n    for (const particle of query.filter(t => area.contains(t.getPosition()))) {\n      particle.bubble.inRange = true;\n      const divs = container.options.interactivity.modes.bubble.divs;\n      const divBubble = Utils_1.Utils.divMode(divs, id);\n\n      if (!particle.bubble.divId || particle.bubble.divId !== id) {\n        this.reset(particle, true);\n        particle.bubble.divId = id;\n      }\n\n      this.hoverBubbleSize(particle, 1, divBubble);\n      this.hoverBubbleOpacity(particle, 1, divBubble);\n      this.hoverBubbleColor(particle, divBubble);\n    }\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container;\n    const bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.options;\n    const bubbleDuration = options.interactivity.modes.bubble.duration;\n    const bubbleDistance = container.retina.bubbleModeDistance;\n    const particlesParam = data.particlesObj.optValue;\n    const pObjBubble = data.bubbleObj.value;\n    const pObj = data.particlesObj.value || 0;\n    const type = data.type;\n\n    if (bubbleParam !== particlesParam) {\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === Enums_1.ProcessBubbleType.size) {\n              particle.bubble.radius = value;\n            }\n\n            if (type === Enums_1.ProcessBubbleType.opacity) {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === Enums_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n\n          if (type === Enums_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === Enums_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === Enums_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }\n\n  clickBubble() {\n    var _a;\n\n    const container = this.container;\n    const options = container.options;\n    const mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (mouseClickPos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance;\n    const query = container.particles.quadTree.query(new Utils_1.Circle(mouseClickPos.x, mouseClickPos.y, distance));\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition();\n      const distMouse = Utils_1.Utils.getDistance(pos, mouseClickPos);\n      const timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (container.bubble.clicking) {\n        if (timeSpent > options.interactivity.modes.bubble.duration) {\n          container.bubble.durationEnd = true;\n        }\n\n        if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n          container.bubble.clicking = false;\n          container.bubble.durationEnd = false;\n        }\n\n        const sizeData = {\n          bubbleObj: {\n            optValue: container.retina.bubbleModeSize,\n            value: particle.bubble.radius\n          },\n          particlesObj: {\n            optValue: (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue,\n            value: particle.size.value\n          },\n          type: Enums_1.ProcessBubbleType.size\n        };\n        this.process(particle, distMouse, timeSpent, sizeData);\n        const opacityData = {\n          bubbleObj: {\n            optValue: options.interactivity.modes.bubble.opacity,\n            value: particle.bubble.opacity\n          },\n          particlesObj: {\n            optValue: particle.particlesOptions.opacity.value,\n            value: particle.opacity.value\n          },\n          type: Enums_1.ProcessBubbleType.opacity\n        };\n        this.process(particle, distMouse, timeSpent, opacityData);\n\n        if (!container.bubble.durationEnd) {\n          if (distMouse <= container.retina.bubbleModeDistance) {\n            this.hoverBubbleColor(particle);\n          } else {\n            delete particle.bubble.color;\n          }\n        } else {\n          delete particle.bubble.color;\n        }\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance;\n    const query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition();\n      const distance = Utils_1.Utils.getDistance(pos, mousePos);\n      const ratio = 1 - distance / container.retina.bubbleModeDistance;\n\n      if (distance <= container.retina.bubbleModeDistance) {\n        if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    var _a;\n\n    const container = this.container;\n    const modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue;\n    const pSize = particle.size.value;\n    const size = Bubbler.calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a;\n\n    const options = this.container.options;\n    const modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (modeOpacity === undefined) {\n      return;\n    }\n\n    const optOpacity = particle.particlesOptions.opacity.value;\n    const pOpacity = particle.opacity.value;\n    const opacity = Bubbler.calculateBubbleValue(pOpacity, modeOpacity, optOpacity, ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, divBubble) {\n    var _a;\n\n    const options = this.container.options;\n\n    if (particle.bubble.color === undefined) {\n      const modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;\n\n      if (modeColor === undefined) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor;\n      particle.bubble.color = Utils_1.ColorUtils.colorToHsl(bubbleColor);\n    }\n  }\n\n}\n\nexports.Bubbler = Bubbler;","map":null,"metadata":{},"sourceType":"script"}