{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nvar Updater_1 = require(\"./Particle/Updater\");\n\nvar Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Infecter_1 = require(\"./Particle/Infecter\");\n\nvar Mover_1 = require(\"./Particle/Mover\");\n\nvar Particle = /*#__PURE__*/function () {\n  function Particle(container, position, overrideOptions) {\n    _classCallCheck(this, Particle);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.container = container;\n    this.fill = true;\n    this.close = true;\n    this.links = [];\n    this.lastNoiseTime = 0;\n    this.destroyed = false;\n    var options = container.options;\n    var particlesOptions = new Particles_1.Particles();\n    particlesOptions.load(options.particles);\n    var shapeType = particlesOptions.shape.type;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType) : overrideShapeType;\n      }\n\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        var shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n        }\n      }\n    } else {\n      var _shapeData = particlesOptions.shape.options[this.shape];\n\n      if (_shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, _shapeData instanceof Array ? Utils_1.Utils.itemFromArray(_shapeData) : _shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.particlesOptions = particlesOptions;\n    var noiseDelay = this.particlesOptions.move.noise.delay;\n    this.noiseDelay = (noiseDelay.random.enable ? Utils_1.Utils.randomInRange(noiseDelay.random.minimumValue, noiseDelay.value) : noiseDelay.value) * 1000;\n    container.retina.initParticle(this);\n    var color = this.particlesOptions.color;\n    var sizeValue = (_g = this.sizeValue) !== null && _g !== void 0 ? _g : container.retina.sizeValue;\n    var randomSize = typeof this.particlesOptions.size.random === \"boolean\" ? this.particlesOptions.size.random : this.particlesOptions.size.random.enable;\n    this.size = {\n      value: randomSize && this.randomMinimumSize !== undefined ? Utils_1.Utils.randomInRange(this.randomMinimumSize, sizeValue) : sizeValue\n    };\n    this.direction = this.particlesOptions.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = {\n      horizontal: this.initialVelocity.horizontal,\n      vertical: this.initialVelocity.vertical\n    };\n    var rotateOptions = this.particlesOptions.rotate;\n    var degAngle = rotateOptions.random ? Math.random() * 360 : rotateOptions.value;\n    this.angle = degAngle * Math.PI / 180;\n    this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n    this.rotateDirection = rotateOptions.direction;\n\n    if (this.rotateDirection === Enums_1.RotateDirection.random) {\n      var index = Math.floor(Math.random() * 2);\n      this.rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    var sizeAnimation = this.particlesOptions.size.animation;\n\n    if (sizeAnimation.enable) {\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          if (!randomSize) {\n            var pxRatio = container.retina.pixelRatio;\n            this.size.value = sizeAnimation.minimumValue * pxRatio;\n          }\n\n          break;\n      }\n\n      this.size.status = Enums_1.SizeAnimationStatus.increasing;\n      this.size.velocity = ((_h = this.sizeAnimationSpeed) !== null && _h !== void 0 ? _h : container.retina.sizeAnimationSpeed) / 100;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.color = Utils_1.ColorUtils.colorToHsl(color);\n    var colorAnimation = this.particlesOptions.color.animation;\n\n    if (colorAnimation.enable) {\n      this.colorVelocity = colorAnimation.speed / 100;\n\n      if (!colorAnimation.sync) {\n        this.colorVelocity = this.colorVelocity * Math.random();\n      }\n    } else {\n      this.colorVelocity = 0;\n    }\n\n    if (colorAnimation.enable && !colorAnimation.sync && this.color) {\n      this.color.h = Math.random() * 360;\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n\n    if (this.particlesOptions.collisions.enable && !this.checkOverlap(position)) {\n      throw new Error();\n    }\n\n    var opacityOptions = this.particlesOptions.opacity;\n    var randomOpacity = opacityOptions.random;\n    var opacityValue = opacityOptions.value;\n    this.opacity = {\n      value: randomOpacity.enable ? Utils_1.Utils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue\n    };\n    var opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n      this.opacity.velocity = opacityAnimation.speed / 100;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    var drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    var imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke) : this.particlesOptions.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    this.strokeColor = Utils_1.ColorUtils.colorToHsl(this.stroke.color);\n\n    if (typeof this.stroke.color !== \"string\") {\n      var strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        if (strokeColorAnimation.enable) {\n          this.strokeColorVelocity = colorAnimation.speed / 100;\n\n          if (!strokeColorAnimation.sync) {\n            this.strokeColorVelocity = this.strokeColorVelocity * Math.random();\n          }\n        } else {\n          this.strokeColorVelocity = 0;\n        }\n\n        if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.color) {\n          this.strokeColor.h = Math.random() * 360;\n        }\n      }\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container, this);\n    this.mover = new Mover_1.Mover(container, this);\n  }\n\n  _createClass(Particle, [{\n    key: \"move\",\n    value: function move(delta) {\n      this.mover.move(delta);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      this.updater.update(delta);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      this.container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"isOverlapping\",\n    value: function isOverlapping() {\n      var _this = this;\n\n      var container = this.container;\n      var collisionFound = false;\n      var pos1 = this.getPosition();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = container.particles.array.filter(function (t) {\n          return t != _this;\n        })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var p2 = _step.value;\n          var pos2 = p2.getPosition();\n          var dist = Utils_1.Utils.getDistance(pos1, pos2);\n\n          if (dist <= this.size.value + p2.size.value) {\n            collisionFound = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return collisionFound;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y\n      };\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a;\n\n      return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor) !== null && _b !== void 0 ? _b : this.color;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(position) {\n      var iterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var container = this.container;\n\n      if (!container.particles.count) {\n        return true;\n      }\n\n      if (iterations >= container.particles.count) {\n        return false;\n      }\n\n      var overlapping = this.isOverlapping();\n\n      if (overlapping) {\n        this.position.x = position ? position.x : Math.random() * container.canvas.size.width;\n        this.position.y = position ? position.y : Math.random() * container.canvas.size.height;\n        return this.checkOverlap(undefined, iterations + 1);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position) {\n      var _a, _b;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = container.plugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Utils_1.Utils.deepExtend({}, pluginPos);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var pos = {\n        x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n        y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height\n      };\n      var outMode = this.particlesOptions.move.outMode;\n\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - this.size.value * 2) {\n          pos.x -= this.size.value;\n        } else if (pos.x < this.size.value * 2) {\n          pos.x += this.size.value;\n        }\n      }\n\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - this.size.value * 2) {\n          pos.y -= this.size.value;\n        } else if (pos.y < this.size.value * 2) {\n          pos.y += this.size.value;\n        }\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = Utils_1.Utils.getParticleBaseVelocity(this);\n      var res = {\n        horizontal: 0,\n        vertical: 0\n      };\n      var moveOptions = this.particlesOptions.move;\n      var rad;\n      var radOffset = Math.PI / 4;\n\n      if (typeof moveOptions.angle === \"number\") {\n        rad = Math.PI / 180 * moveOptions.angle;\n      } else {\n        rad = Math.PI / 180 * moveOptions.angle.value;\n        radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      }\n\n      var range = {\n        left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n        right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)\n      };\n\n      if (moveOptions.straight) {\n        res.horizontal = baseVelocity.x;\n        res.vertical = baseVelocity.y;\n\n        if (moveOptions.random) {\n          res.horizontal += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n          res.vertical += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n        }\n      } else {\n        res.horizontal = baseVelocity.x + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n        res.vertical = baseVelocity.y + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function loadImageShape(container, drawer) {\n      var _this2 = this;\n\n      var _a, _b, _c, _d;\n\n      if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n        return;\n      }\n\n      var shape = this.particlesOptions.shape;\n      var imageDrawer = drawer;\n      var imagesOptions = shape.options[this.shape];\n      var images = imageDrawer.getImages(container).images;\n      var image = Utils_1.Utils.itemFromArray(images);\n      var optionsImage = imagesOptions instanceof Array ? imagesOptions.find(function (t) {\n        return t.src === image.source;\n      }) : imagesOptions;\n      var color = this.getFillColor();\n      var imageRes;\n\n      if ((image === null || image === void 0 ? void 0 : image.svgData) !== undefined && optionsImage.replaceColor && color) {\n        var svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n        var svg = new Blob([svgColoredData], {\n          type: \"image/svg+xml\"\n        });\n        var domUrl = window.URL || window.webkitURL || window;\n        var url = domUrl.createObjectURL(svg);\n        var img = new Image();\n        imageRes = {\n          data: image,\n          loaded: false,\n          ratio: optionsImage.width / optionsImage.height,\n          replaceColor: (_a = optionsImage.replaceColor) !== null && _a !== void 0 ? _a : optionsImage.replace_color,\n          source: optionsImage.src\n        };\n        img.addEventListener(\"load\", function () {\n          if (_this2.image) {\n            _this2.image.loaded = true;\n            image.element = img;\n          }\n\n          domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", function () {\n          domUrl.revokeObjectURL(url);\n          Utils_1.Utils.loadImage(optionsImage.src).then(function (img2) {\n            if (_this2.image) {\n              image.element = img2.element;\n              _this2.image.loaded = true;\n            }\n          });\n        });\n        img.src = url;\n      } else {\n        imageRes = {\n          data: image,\n          loaded: true,\n          ratio: optionsImage.width / optionsImage.height,\n          replaceColor: (_b = optionsImage.replaceColor) !== null && _b !== void 0 ? _b : optionsImage.replace_color,\n          source: optionsImage.src\n        };\n      }\n\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n\n      var fill = (_c = optionsImage.fill) !== null && _c !== void 0 ? _c : this.fill;\n      var close = (_d = optionsImage.close) !== null && _d !== void 0 ? _d : this.close;\n      return {\n        image: imageRes,\n        fill: fill,\n        close: close\n      };\n    }\n  }]);\n\n  return Particle;\n}();\n\nexports.Particle = Particle;","map":null,"metadata":{},"sourceType":"script"}