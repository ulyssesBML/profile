{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Repulser = void 0;\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Repulser = /*#__PURE__*/function () {\n  function Repulser(container) {\n    _classCallCheck(this, Repulser);\n\n    this.container = container;\n  }\n\n  _createClass(Repulser, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var options = container.options;\n      var mouse = container.interactivity.mouse;\n      var events = options.interactivity.events;\n      var divs = events.onDiv;\n      var divRepulse = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.repulse, divs);\n\n      if (!(divRepulse || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode) || divRepulse;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _this = this;\n\n      var container = this.container;\n      var options = container.options;\n      var mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;\n      var events = options.interactivity.events;\n      var hoverEnabled = events.onHover.enable;\n      var hoverMode = events.onHover.mode;\n      var clickEnabled = events.onClick.enable;\n      var clickMode = events.onClick.mode;\n      var divs = events.onDiv;\n\n      if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode)) {\n        this.hoverRepulse();\n      } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode)) {\n        this.clickRepulse();\n      } else {\n        Utils_1.Utils.divModeExecute(Enums_1.DivMode.repulse, divs, function (id, div) {\n          return _this.singleDivRepulse(id, div);\n        });\n      }\n    }\n  }, {\n    key: \"singleDivRepulse\",\n    value: function singleDivRepulse(id, div) {\n      var container = this.container;\n      var elem = document.getElementById(id);\n\n      if (!elem) {\n        return;\n      }\n\n      var pxRatio = container.retina.pixelRatio;\n      var pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      };\n      var repulseRadius = elem.offsetWidth / 2 * pxRatio;\n      var area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n      var divs = container.options.interactivity.modes.repulse.divs;\n      var divRepulse = Utils_1.Utils.divMode(divs, id);\n      this.processRepulse(pos, repulseRadius, area, divRepulse);\n    }\n  }, {\n    key: \"hoverRepulse\",\n    value: function hoverRepulse() {\n      var container = this.container;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var repulseRadius = container.retina.repulseModeDistance;\n      this.processRepulse(mousePos, repulseRadius, new Utils_1.Circle(mousePos.x, mousePos.y, repulseRadius));\n    }\n  }, {\n    key: \"processRepulse\",\n    value: function processRepulse(position, repulseRadius, area, divRepulse) {\n      var _a;\n\n      var container = this.container;\n      var query = container.particles.quadTree.query(area);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var particle = _step.value;\n\n          var _Utils_1$Utils$getDis = Utils_1.Utils.getDistances(particle.position, position),\n              dx = _Utils_1$Utils$getDis.dx,\n              dy = _Utils_1$Utils$getDis.dy,\n              distance = _Utils_1$Utils$getDis.distance;\n\n          var normVec = {\n            x: dx / distance,\n            y: dy / distance\n          };\n          var velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : container.options.interactivity.modes.repulse.speed) * 100;\n          var repulseFactor = Utils_1.Utils.clamp((1 - Math.pow(distance / repulseRadius, 2)) * velocity, 0, 50);\n          particle.position.x = particle.position.x + normVec.x * repulseFactor;\n          particle.position.y = particle.position.y + normVec.y * repulseFactor;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"clickRepulse\",\n    value: function clickRepulse() {\n      var container = this.container;\n\n      if (!container.repulse.finish) {\n        if (!container.repulse.count) {\n          container.repulse.count = 0;\n        }\n\n        container.repulse.count++;\n\n        if (container.repulse.count === container.particles.count) {\n          container.repulse.finish = true;\n        }\n      }\n\n      if (container.repulse.clicking) {\n        var repulseDistance = container.retina.repulseModeDistance;\n        var repulseRadius = Math.pow(repulseDistance / 6, 3);\n        var mouseClickPos = container.interactivity.mouse.clickPosition;\n\n        if (mouseClickPos === undefined) {\n          return;\n        }\n\n        var range = new Utils_1.Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius);\n        var query = container.particles.quadTree.query(range);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = query[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var particle = _step2.value;\n\n            var _Utils_1$Utils$getDis2 = Utils_1.Utils.getDistances(mouseClickPos, particle.position),\n                dx = _Utils_1$Utils$getDis2.dx,\n                dy = _Utils_1$Utils$getDis2.dy,\n                distance = _Utils_1$Utils$getDis2.distance;\n\n            var d = distance * distance;\n            var velocity = container.options.interactivity.modes.repulse.speed;\n            var force = -repulseRadius * velocity / d;\n\n            if (d <= repulseRadius) {\n              container.repulse.particles.push(particle);\n              var angle = Math.atan2(dy, dx);\n              particle.velocity.horizontal = force * Math.cos(angle);\n              particle.velocity.vertical = force * Math.sin(angle);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } else if (container.repulse.clicking === false) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = container.repulse.particles[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _particle = _step3.value;\n            _particle.velocity.horizontal = _particle.initialVelocity.horizontal;\n            _particle.velocity.vertical = _particle.initialVelocity.vertical;\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        container.repulse.particles = [];\n      }\n    }\n  }]);\n\n  return Repulser;\n}();\n\nexports.Repulser = Repulser;","map":null,"metadata":{},"sourceType":"script"}