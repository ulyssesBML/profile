{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar Bubbler = /*#__PURE__*/function () {\n  function Bubbler(container) {\n    _classCallCheck(this, Bubbler);\n\n    this.container = container;\n  }\n\n  _createClass(Bubbler, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var options = container.options;\n      var mouse = container.interactivity.mouse;\n      var events = options.interactivity.events;\n      var divs = events.onDiv;\n      var divBubble = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n\n      if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle, force) {\n      if (!particle.bubble.inRange || force) {\n        delete particle.bubble.divId;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n      }\n    }\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _this = this;\n\n      var options = this.container.options;\n      var events = options.interactivity.events;\n      var onHover = events.onHover;\n      var onClick = events.onClick;\n      var hoverEnabled = onHover.enable;\n      var hoverMode = onHover.mode;\n      var clickEnabled = onClick.enable;\n      var clickMode = onClick.mode;\n      var divs = events.onDiv;\n\n      if (hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n        this.hoverBubble();\n      } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n        this.clickBubble();\n      } else {\n        Utils_1.Utils.divModeExecute(Enums_1.DivMode.bubble, divs, function (id, div) {\n          return _this.singleDivHover(id, div);\n        });\n      }\n    }\n  }, {\n    key: \"singleDivHover\",\n    value: function singleDivHover(id, div) {\n      var container = this.container;\n      var elem = document.getElementById(id);\n\n      if (!elem) {\n        return;\n      }\n\n      var pxRatio = container.retina.pixelRatio;\n      var pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      };\n      var repulseRadius = elem.offsetWidth / 2 * pxRatio;\n      var area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n      var query = container.particles.quadTree.query(area);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = query.filter(function (t) {\n          return area.contains(t.getPosition());\n        })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var particle = _step.value;\n          particle.bubble.inRange = true;\n          var divs = container.options.interactivity.modes.bubble.divs;\n          var divBubble = Utils_1.Utils.divMode(divs, id);\n\n          if (!particle.bubble.divId || particle.bubble.divId !== id) {\n            this.reset(particle, true);\n            particle.bubble.divId = id;\n          }\n\n          this.hoverBubbleSize(particle, 1, divBubble);\n          this.hoverBubbleOpacity(particle, 1, divBubble);\n          this.hoverBubbleColor(particle, divBubble);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"process\",\n    value: function process(particle, distMouse, timeSpent, data) {\n      var container = this.container;\n      var bubbleParam = data.bubbleObj.optValue;\n\n      if (bubbleParam === undefined) {\n        return;\n      }\n\n      var options = container.options;\n      var bubbleDuration = options.interactivity.modes.bubble.duration;\n      var bubbleDistance = container.retina.bubbleModeDistance;\n      var particlesParam = data.particlesObj.optValue;\n      var pObjBubble = data.bubbleObj.value;\n      var pObj = data.particlesObj.value || 0;\n      var type = data.type;\n\n      if (bubbleParam !== particlesParam) {\n        if (!container.bubble.durationEnd) {\n          if (distMouse <= bubbleDistance) {\n            var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n            if (obj !== bubbleParam) {\n              var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n              if (type === Enums_1.ProcessBubbleType.size) {\n                particle.bubble.radius = value;\n              }\n\n              if (type === Enums_1.ProcessBubbleType.opacity) {\n                particle.bubble.opacity = value;\n              }\n            }\n          } else {\n            if (type === Enums_1.ProcessBubbleType.size) {\n              delete particle.bubble.radius;\n            }\n\n            if (type === Enums_1.ProcessBubbleType.opacity) {\n              delete particle.bubble.opacity;\n            }\n          }\n        } else if (pObjBubble) {\n          if (type === Enums_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n\n          if (type === Enums_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"clickBubble\",\n    value: function clickBubble() {\n      var _a;\n\n      var container = this.container;\n      var options = container.options;\n      var mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (mouseClickPos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance;\n      var query = container.particles.quadTree.query(new Utils_1.Circle(mouseClickPos.x, mouseClickPos.y, distance));\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = query[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var particle = _step2.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition();\n          var distMouse = Utils_1.Utils.getDistance(pos, mouseClickPos);\n          var timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n          if (container.bubble.clicking) {\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n              container.bubble.durationEnd = true;\n            }\n\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n              container.bubble.clicking = false;\n              container.bubble.durationEnd = false;\n            }\n\n            var sizeData = {\n              bubbleObj: {\n                optValue: container.retina.bubbleModeSize,\n                value: particle.bubble.radius\n              },\n              particlesObj: {\n                optValue: (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue,\n                value: particle.size.value\n              },\n              type: Enums_1.ProcessBubbleType.size\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            var opacityData = {\n              bubbleObj: {\n                optValue: options.interactivity.modes.bubble.opacity,\n                value: particle.bubble.opacity\n              },\n              particlesObj: {\n                optValue: particle.particlesOptions.opacity.value,\n                value: particle.opacity.value\n              },\n              type: Enums_1.ProcessBubbleType.opacity\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n\n            if (!container.bubble.durationEnd) {\n              if (distMouse <= container.retina.bubbleModeDistance) {\n                this.hoverBubbleColor(particle);\n              } else {\n                delete particle.bubble.color;\n              }\n            } else {\n              delete particle.bubble.color;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"hoverBubble\",\n    value: function hoverBubble() {\n      var container = this.container;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance;\n      var query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = query[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var particle = _step3.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition();\n\n          var _distance = Utils_1.Utils.getDistance(pos, mousePos);\n\n          var ratio = 1 - _distance / container.retina.bubbleModeDistance;\n\n          if (_distance <= container.retina.bubbleModeDistance) {\n            if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n              this.hoverBubbleSize(particle, ratio);\n              this.hoverBubbleOpacity(particle, ratio);\n              this.hoverBubbleColor(particle);\n            }\n          } else {\n            this.reset(particle);\n          }\n\n          if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n            this.reset(particle);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"hoverBubbleSize\",\n    value: function hoverBubbleSize(particle, ratio, divBubble) {\n      var _a;\n\n      var container = this.container;\n      var modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n      if (modeSize === undefined) {\n        return;\n      }\n\n      var optSize = (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue;\n      var pSize = particle.size.value;\n      var size = Bubbler.calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    }\n  }, {\n    key: \"hoverBubbleOpacity\",\n    value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n      var _a;\n\n      var options = this.container.options;\n      var modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n      if (modeOpacity === undefined) {\n        return;\n      }\n\n      var optOpacity = particle.particlesOptions.opacity.value;\n      var pOpacity = particle.opacity.value;\n      var opacity = Bubbler.calculateBubbleValue(pOpacity, modeOpacity, optOpacity, ratio);\n\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    }\n  }, {\n    key: \"hoverBubbleColor\",\n    value: function hoverBubbleColor(particle, divBubble) {\n      var _a;\n\n      var options = this.container.options;\n\n      if (particle.bubble.color === undefined) {\n        var modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;\n\n        if (modeColor === undefined) {\n          return;\n        }\n\n        var bubbleColor = modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor;\n        particle.bubble.color = Utils_1.ColorUtils.colorToHsl(bubbleColor);\n      }\n    }\n  }], [{\n    key: \"calculateBubbleValue\",\n    value: function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n      if (modeValue > optionsValue) {\n        var size = particleValue + (modeValue - optionsValue) * ratio;\n        return Utils_1.Utils.clamp(size, particleValue, modeValue);\n      } else if (modeValue < optionsValue) {\n        var _size = particleValue - (optionsValue - modeValue) * ratio;\n\n        return Utils_1.Utils.clamp(_size, modeValue, particleValue);\n      }\n    }\n  }]);\n\n  return Bubbler;\n}();\n\nexports.Bubbler = Bubbler;","map":null,"metadata":{},"sourceType":"script"}