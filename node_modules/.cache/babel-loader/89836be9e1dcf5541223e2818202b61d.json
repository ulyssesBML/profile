{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ulysses/Documentos/profile/react-gsap-page-transitions-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  move(delta) {\n    const particle = this.particle;\n    particle.bubble.inRange = false;\n    particle.links = [];\n\n    for (const _ref of this.container.plugins) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const plugin = _ref2[1];\n\n      if (particle.destroyed) {\n        break;\n      }\n\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n\n  moveParticle(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const particlesOptions = particle.particlesOptions;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor();\n    const baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n    const moveSpeed = baseSpeed / 2 * slowFactor * delta.factor;\n    this.applyNoise(delta);\n    particle.position.x += particle.velocity.horizontal * moveSpeed;\n    particle.position.y += particle.velocity.vertical * moveSpeed;\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n  }\n\n  applyNoise(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.particlesOptions;\n    const noiseOptions = particlesOptions.move.noise;\n    const noiseEnabled = noiseOptions.enable;\n\n    if (!noiseEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastNoiseTime <= particle.noiseDelay) {\n      particle.lastNoiseTime += delta.value;\n      return;\n    }\n\n    const noise = container.noise.generate(particle);\n    particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n    particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n    particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n    particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n    particle.lastNoiseTime -= particle.noiseDelay;\n  }\n\n  moveParallax() {\n    const container = this.container;\n    const options = container.options;\n\n    if (!options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const windowDimension = {\n      height: window.innerHeight / 2,\n      width: window.innerWidth / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const tmp = {\n      x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n      y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce)\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.options;\n    const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":null,"metadata":{},"sourceType":"script"}