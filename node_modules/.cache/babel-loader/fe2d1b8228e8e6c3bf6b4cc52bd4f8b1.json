{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nconst Enums_1 = require(\"../../../../Enums\");\n\nclass Collider {\n  constructor(container) {\n    this.container = container;\n  }\n\n  static rotate(velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  }\n\n  static collisionVelocity(v1, v2, m1, m2) {\n    return {\n      horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n      vertical: v1.vertical\n    };\n  }\n\n  static bounce(p1, p2) {\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n    const yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n    const xDist = pos2.x - pos1.x;\n    const yDist = pos2.y - pos1.y;\n\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n      const angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n      const m1 = p1.size.value;\n      const m2 = p2.size.value;\n      const u1 = Collider.rotate(p1.velocity, angle);\n      const u2 = Collider.rotate(p2.velocity, angle);\n      const v1 = Collider.collisionVelocity(u1, u2, m1, m2);\n      const v2 = Collider.collisionVelocity(u2, u1, m1, m2);\n      const vFinal1 = Collider.rotate(v1, -angle);\n      const vFinal2 = Collider.rotate(v2, -angle);\n      p1.velocity.horizontal = vFinal1.horizontal;\n      p1.velocity.vertical = vFinal1.vertical;\n      p2.velocity.horizontal = vFinal2.horizontal;\n      p2.velocity.vertical = vFinal2.vertical;\n    }\n  }\n\n  static destroy(p1, p2) {\n    if (p1.size.value === undefined && p2.size.value !== undefined) {\n      p1.destroy();\n    } else if (p1.size.value !== undefined && p2.size.value === undefined) {\n      p2.destroy();\n    } else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n      if (p1.size.value >= p2.size.value) {\n        p2.destroy();\n      } else {\n        p1.destroy();\n      }\n    }\n  }\n\n  static getRadius(particle, fallback) {\n    return particle.bubble.radius || particle.size.value || fallback;\n  }\n\n  isEnabled(particle) {\n    return particle.particlesOptions.collisions.enable;\n  }\n\n  reset() {}\n\n  interact(p1) {\n    const container = this.container;\n    const pos1 = p1.getPosition();\n    const query = container.particles.quadTree.query(new Utils_1.Circle(pos1.x, pos1.y, p1.size.value * 2));\n\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition();\n      const dist = Utils_1.Utils.getDistance(pos1, pos2);\n      const defaultSize = container.retina.sizeValue;\n      const radius1 = Collider.getRadius(p1, defaultSize);\n      const radius2 = Collider.getRadius(p2, defaultSize);\n      const distP = radius1 + radius2;\n\n      if (dist <= distP) {\n        this.resolveCollision(p1, p2);\n      }\n    }\n  }\n\n  resolveCollision(p1, p2) {\n    switch (p1.particlesOptions.collisions.mode) {\n      case Enums_1.CollisionMode.absorb:\n        {\n          this.absorb(p1, p2);\n          break;\n        }\n\n      case Enums_1.CollisionMode.bounce:\n        {\n          Collider.bounce(p1, p2);\n          break;\n        }\n\n      case Enums_1.CollisionMode.destroy:\n        {\n          Collider.destroy(p1, p2);\n          break;\n        }\n    }\n  }\n\n  absorb(p1, p2) {\n    const container = this.container;\n    const fps = container.options.fpsLimit / 1000;\n\n    if (p1.size.value === undefined && p2.size.value !== undefined) {\n      p1.destroy();\n    } else if (p1.size.value !== undefined && p2.size.value === undefined) {\n      p2.destroy();\n    } else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n      if (p1.size.value >= p2.size.value) {\n        const factor = Utils_1.Utils.clamp(p1.size.value / p2.size.value, 0, p2.size.value) * fps;\n        p1.size.value += factor;\n        p2.size.value -= factor;\n\n        if (p2.size.value <= container.retina.pixelRatio) {\n          p2.size.value = 0;\n          p2.destroy();\n        }\n      } else {\n        const factor = Utils_1.Utils.clamp(p2.size.value / p1.size.value, 0, p1.size.value) * fps;\n        p1.size.value -= factor;\n        p2.size.value += factor;\n\n        if (p1.size.value <= container.retina.pixelRatio) {\n          p1.size.value = 0;\n          p1.destroy();\n        }\n      }\n    }\n  }\n\n}\n\nexports.Collider = Collider;","map":null,"metadata":{},"sourceType":"script"}