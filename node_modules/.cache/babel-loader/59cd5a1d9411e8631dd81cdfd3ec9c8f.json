{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Loader = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst Container_1 = require(\"./Container\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst tsParticlesDom = [];\n\nclass Loader {\n  static dom() {\n    return tsParticlesDom;\n  }\n\n  static domItem(index) {\n    const dom = Loader.dom();\n    const item = dom[index];\n\n    if (item && !item.destroyed) {\n      return item;\n    }\n\n    dom.splice(index, 1);\n  }\n\n  static loadFromArray(tagId, options, index) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      return Loader.load(tagId, Utils_1.Utils.itemFromArray(options, index));\n    });\n  }\n\n  static setFromArray(id, domContainer, options, index) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      return Loader.set(id, domContainer, Utils_1.Utils.itemFromArray(options, index));\n    });\n  }\n\n  static load(tagId, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const domContainer = document.getElementById(tagId);\n\n      if (!domContainer) {\n        return;\n      }\n\n      return Loader.set(tagId, domContainer, options);\n    });\n  }\n\n  static set(id, domContainer, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const dom = Loader.dom();\n      const oldIndex = dom.findIndex(v => v.id === id);\n\n      if (oldIndex >= 0) {\n        const old = Loader.domItem(oldIndex);\n\n        if (old && !old.destroyed) {\n          old.destroy();\n          dom.splice(oldIndex, 1);\n        }\n      }\n\n      let canvasEl;\n      let generatedCanvas;\n\n      if (domContainer.tagName.toLowerCase() === \"canvas\") {\n        canvasEl = domContainer;\n        generatedCanvas = false;\n      } else {\n        const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n\n        if (existingCanvases.length) {\n          canvasEl = existingCanvases[0];\n\n          if (!canvasEl.className) {\n            canvasEl.className = Utils_1.Constants.canvasClass;\n          }\n\n          generatedCanvas = false;\n        } else {\n          generatedCanvas = true;\n          canvasEl = document.createElement(\"canvas\");\n          canvasEl.className = Utils_1.Constants.canvasClass;\n          canvasEl.style.width = \"100%\";\n          canvasEl.style.height = \"100%\";\n          domContainer.appendChild(canvasEl);\n        }\n      }\n\n      const newItem = new Container_1.Container(id, options);\n\n      if (oldIndex >= 0) {\n        dom.splice(oldIndex, 0, newItem);\n      } else {\n        dom.push(newItem);\n      }\n\n      newItem.canvas.loadCanvas(canvasEl, generatedCanvas);\n      yield newItem.start();\n      return newItem;\n    });\n  }\n\n  static loadJSON(tagId, jsonUrl) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const response = yield fetch(jsonUrl);\n\n      if (response.ok) {\n        const options = yield response.json();\n\n        if (options instanceof Array) {\n          return Loader.loadFromArray(tagId, options);\n        } else {\n          return Loader.load(tagId, options);\n        }\n      } else {\n        Loader.fetchError(response.status);\n      }\n    });\n  }\n\n  static setJSON(id, domContainer, jsonUrl) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const response = yield fetch(jsonUrl);\n\n      if (response.ok) {\n        const options = yield response.json();\n\n        if (options instanceof Array) {\n          return Loader.setFromArray(id, domContainer, options);\n        } else {\n          return Loader.set(id, domContainer, options);\n        }\n      } else {\n        Loader.fetchError(response.status);\n      }\n    });\n  }\n\n  static setOnClickHandler(callback) {\n    const dom = Loader.dom();\n\n    if (dom.length === 0) {\n      throw new Error(\"Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()\");\n    }\n\n    for (const domItem of dom) {\n      const el = domItem.interactivity.element;\n\n      if (!el) {\n        continue;\n      }\n\n      const clickOrTouchHandler = (e, pos) => {\n        if (domItem.destroyed) {\n          return;\n        }\n\n        const pxRatio = domItem.retina.pixelRatio;\n        const particles = domItem.particles.quadTree.query(new Utils_1.Circle(pos.x * pxRatio, pos.y * pxRatio, domItem.retina.sizeValue));\n        callback(e, particles);\n      };\n\n      const clickHandler = e => {\n        if (domItem.destroyed) {\n          return;\n        }\n\n        const mouseEvent = e;\n        const pos = {\n          x: mouseEvent.offsetX || mouseEvent.clientX,\n          y: mouseEvent.offsetY || mouseEvent.clientY\n        };\n        clickOrTouchHandler(e, pos);\n      };\n\n      const touchStartHandler = () => {\n        if (domItem.destroyed) {\n          return;\n        }\n\n        touched = true;\n        touchMoved = false;\n      };\n\n      const touchMoveHandler = () => {\n        if (domItem.destroyed) {\n          return;\n        }\n\n        touchMoved = true;\n      };\n\n      const touchEndHandler = e => {\n        var _a, _b, _c;\n\n        if (domItem.destroyed) {\n          return;\n        }\n\n        if (touched && !touchMoved) {\n          const touchEvent = e;\n          const lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n          const canvasRect = (_a = domItem.canvas.element) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\n          const pos = {\n            x: lastTouch.clientX - ((_b = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.left) !== null && _b !== void 0 ? _b : 0),\n            y: lastTouch.clientY - ((_c = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.top) !== null && _c !== void 0 ? _c : 0)\n          };\n          clickOrTouchHandler(e, pos);\n        }\n\n        touched = false;\n        touchMoved = false;\n      };\n\n      const touchCancelHandler = () => {\n        if (domItem.destroyed) {\n          return;\n        }\n\n        touched = false;\n        touchMoved = false;\n      };\n\n      let touched = false;\n      let touchMoved = false;\n      el.addEventListener(\"click\", clickHandler);\n      el.addEventListener(\"touchstart\", touchStartHandler);\n      el.addEventListener(\"touchmove\", touchMoveHandler);\n      el.addEventListener(\"touchend\", touchEndHandler);\n      el.addEventListener(\"touchcancel\", touchCancelHandler);\n    }\n  }\n\n  static fetchError(statusCode) {\n    console.error(`Error tsParticles - fetch status: ${statusCode}`);\n    console.error(\"Error tsParticles - File config not found\");\n  }\n\n}\n\nexports.Loader = Loader;","map":null,"metadata":{},"sourceType":"script"}