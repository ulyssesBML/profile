{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      var options = this.container.options;\n      var cover = options.backgroundMask.cover;\n      var color = cover.color;\n      var trail = options.particles.move.trail;\n      var coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n      this.coverColor = coverRgb !== undefined ? {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      } : undefined;\n      this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n      this.initBackground();\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas, generatedCanvas) {\n      var _a;\n\n      if (!canvas.className) {\n        canvas.className = Utils_1.Constants.canvasClass;\n      }\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n      this.element = canvas;\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      if (this.context) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      this.element.width = this.size.width;\n      this.element.height = this.size.height;\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var options = this.container.options;\n\n      if (!this.context) {\n        return;\n      }\n\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n      } else {\n        this.paintBase();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var options = this.container.options;\n      var trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n      } else if (this.context) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n      }\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a, _b;\n\n      var container = this.container;\n      var options = container.options;\n      var p2 = link1.destination;\n      var p3 = link2.destination;\n      var triangleOptions = p1.particlesOptions.links.triangles;\n      var opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var pos3 = p3.getPosition();\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n      if (!colorTriangle) {\n        var linksOptions = p1.particlesOptions.links;\n        var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n        if (linkColor === Utils_1.Constants.randomColorValue) {\n          colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n        } else if (linkColor === \"mid\") {\n          var sourceColor = p1.getFillColor();\n          var destColor = p2.getFillColor();\n\n          if (sourceColor && destColor) {\n            colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n            if (!hslColor) {\n              return;\n            }\n\n            colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n          }\n        } else {\n          colorTriangle = linkColor;\n        }\n      }\n\n      var width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n      Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var _a, _b, _c;\n\n      var container = this.container;\n      var options = container.options;\n      var p2 = link.destination;\n      var opacity = link.opacity;\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var colorLine;\n      var twinkle = p1.particlesOptions.twinkle.lines;\n\n      if (twinkle.enable) {\n        var twinkleFreq = twinkle.frequency;\n        var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        var twinkling = Math.random() < twinkleFreq;\n\n        if (twinkling && twinkleRgb !== undefined) {\n          colorLine = twinkleRgb;\n          opacity = twinkle.opacity;\n        }\n      }\n\n      if (!colorLine) {\n        var linksOptions = p1.particlesOptions.links;\n        var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n        if (linkColor === Utils_1.Constants.randomColorValue) {\n          colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n        } else if (linkColor === \"mid\") {\n          var sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();\n          var destColor = (_b = p2.getFillColor()) !== null && _b !== void 0 ? _b : p2.getStrokeColor();\n\n          if (sourceColor && destColor) {\n            colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n            if (!hslColor) {\n              return;\n            }\n\n            colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n          }\n        } else {\n          colorLine = linkColor;\n        }\n      }\n\n      var width = (_c = p1.linksWidth) !== null && _c !== void 0 ? _c : container.retina.linksWidth;\n      Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _a;\n\n      var lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var _a;\n\n      var container = this.container;\n      var ctx = container.canvas.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var beginPos = particle.getPosition();\n      Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this = this;\n\n      var _a, _b, _c, _d, _e;\n\n      if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor();\n\n      if (pfColor === undefined) {\n        return;\n      }\n\n      var psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n      var options = this.container.options;\n      var twinkle = particle.particlesOptions.twinkle.particles;\n      var twinkleFreq = twinkle.frequency;\n      var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      var twinkling = twinkle.enable && Math.random() < twinkleFreq;\n      var radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n      var opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n      var infectionStage = particle.infecter.infectionStage;\n      var infection = options.infection;\n      var infectionStages = infection.stages;\n      var infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n      var infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n      var fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n      var sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n      var fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n\n      if (!this.context || !fillColorValue) {\n        return;\n      }\n\n      var strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity) : fillColorValue;\n\n      if (particle.links.length > 0) {\n        this.context.save();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = particle.links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var link = _step.value;\n\n            if (particle.particlesOptions.links.triangles.enable) {\n              (function () {\n                var links = particle.links.map(function (l) {\n                  return l.destination;\n                });\n                var vertices = link.destination.links.filter(function (t) {\n                  return links.indexOf(t.destination) >= 0;\n                });\n\n                if (vertices.length) {\n                  var _iteratorNormalCompletion2 = true;\n                  var _didIteratorError2 = false;\n                  var _iteratorError2 = undefined;\n\n                  try {\n                    for (var _iterator2 = vertices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                      var vertice = _step2.value;\n\n                      _this.drawLinkTriangle(particle, link, vertice);\n                    }\n                  } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                        _iterator2.return();\n                      }\n                    } finally {\n                      if (_didIteratorError2) {\n                        throw _iteratorError2;\n                      }\n                    }\n                  }\n                }\n              })();\n            }\n\n            this.drawLinkLine(particle, link);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.context.restore();\n      }\n\n      if (radius > 0) {\n        Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n      }\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      if (!this.context) {\n        return;\n      }\n\n      Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      if (!this.context) {\n        return;\n      }\n\n      Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var options = this.container.options;\n      var connectOptions = options.interactivity.modes.connect;\n\n      if (this.context) {\n        return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n      }\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.options;\n      var background = options.background;\n      var element = this.element;\n\n      if (!element) {\n        return;\n      }\n\n      var elementStyle = element.style;\n\n      if (background.color) {\n        var color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n        if (color) {\n          elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n        }\n      }\n\n      if (background.image) {\n        elementStyle.backgroundImage = background.image;\n      }\n\n      if (background.position) {\n        elementStyle.backgroundPosition = background.position;\n      }\n\n      if (background.repeat) {\n        elementStyle.backgroundRepeat = background.repeat;\n      }\n\n      if (background.size) {\n        elementStyle.backgroundSize = background.size;\n      }\n    }\n  }]);\n\n  return Canvas;\n}();\n\nexports.Canvas = Canvas;","map":null,"metadata":{},"sourceType":"script"}