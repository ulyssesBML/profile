{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ulysses/Documentos/profile/profile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Linker = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Linker = /*#__PURE__*/function () {\n  function Linker(container) {\n    _classCallCheck(this, Linker);\n\n    this.container = container;\n  }\n\n  _createClass(Linker, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return particle.particlesOptions.links.enable;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact(p1) {\n      var _a;\n\n      var container = this.container;\n      var linkOpt1 = p1.particlesOptions.links;\n      var optOpacity = linkOpt1.opacity;\n      var optDistance = (_a = p1.linksDistance) !== null && _a !== void 0 ? _a : container.retina.linksDistance;\n      var canvasSize = container.canvas.size;\n      var warp = linkOpt1.warp;\n      var pos1 = p1.getPosition();\n      var range = warp ? new Utils_1.CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new Utils_1.Circle(pos1.x, pos1.y, optDistance);\n      var query = container.particles.quadTree.query(range);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var p2 = _step.value;\n          var linkOpt2 = p2.particlesOptions.links;\n\n          if (p1 === p2 || !linkOpt2.enable || linkOpt1.id !== linkOpt2.id) {\n            continue;\n          }\n\n          var pos2 = p2.getPosition();\n          var distance = Utils_1.Utils.getDistance(pos1, pos2);\n\n          if (warp) {\n            if (distance > optDistance) {\n              var pos2NE = {\n                x: pos2.x - canvasSize.width,\n                y: pos2.y\n              };\n              distance = Utils_1.Utils.getDistance(pos1, pos2NE);\n\n              if (distance > optDistance) {\n                var pos2SE = {\n                  x: pos2.x - canvasSize.width,\n                  y: pos2.y - canvasSize.height\n                };\n                distance = Utils_1.Utils.getDistance(pos1, pos2SE);\n\n                if (distance > optDistance) {\n                  var pos2SW = {\n                    x: pos2.x,\n                    y: pos2.y - canvasSize.height\n                  };\n                  distance = Utils_1.Utils.getDistance(pos1, pos2SW);\n                }\n              }\n            }\n          }\n\n          if (distance > optDistance) {\n            return;\n          }\n\n          var opacityLine = optOpacity - distance * optOpacity / optDistance;\n\n          if (opacityLine > 0) {\n            var linksOptions = p1.particlesOptions.links;\n            var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n            if (!linkColor) {\n              var optColor = linksOptions.color;\n              var color = typeof optColor === \"string\" ? optColor : optColor.value;\n\n              if (color === Utils_1.Constants.randomColorValue) {\n                if (linksOptions.consent) {\n                  linkColor = Utils_1.ColorUtils.colorToRgb({\n                    value: color\n                  });\n                } else if (linksOptions.blink) {\n                  linkColor = Utils_1.Constants.randomColorValue;\n                } else {\n                  linkColor = Utils_1.Constants.midColorValue;\n                }\n              } else {\n                linkColor = Utils_1.ColorUtils.colorToRgb({\n                  value: color\n                });\n              }\n\n              if (linksOptions.id !== undefined) {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n              } else {\n                container.particles.linksColor = linkColor;\n              }\n            }\n\n            if (p2.links.map(function (t) {\n              return t.destination;\n            }).indexOf(p1) === -1 && p1.links.map(function (t) {\n              return t.destination;\n            }).indexOf(p2) === -1) {\n              p1.links.push({\n                destination: p2,\n                opacity: opacityLine\n              });\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Linker;\n}();\n\nexports.Linker = Linker;","map":null,"metadata":{},"sourceType":"script"}